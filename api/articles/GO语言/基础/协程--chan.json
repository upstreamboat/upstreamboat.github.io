{"title":"协程--chan","uid":"2760989e79e2aad73e5334ce01559db2","slug":"GO语言/基础/协程--chan","date":"2024-10-12T02:26:58.055Z","updated":"2024-10-19T08:23:42.251Z","comments":true,"path":"api/articles/GO语言/基础/协程--chan.json","keywords":null,"cover":"/images/cover/5.png","content":"<h1 id=\"协程–chan\"><a href=\"#协程–chan\" class=\"headerlink\" title=\"协程–chan\"></a>协程–chan</h1><ol>\n<li>go 后调用的函数，其返回值会被忽略。</li>\n<li>协程间的通信：<ul>\n<li>内存共享</li>\n<li>context</li>\n<li>channel</li>\n</ul>\n</li>\n<li>控制协程：<ul>\n<li>context</li>\n<li>sync.Group()</li>\n<li>channel</li>\n</ul>\n</li>\n<li>chan 关闭后，仍可以读取（读到零值），但不可以写入</li>\n<li>遍历 chan 时，如无数据，则会阻塞；如 chan 关闭，则会退出。</li>\n<li>从 chan 中读：<code>j, ok := &lt;-c</code> &#x2F;&#x2F; 如果接收不到数据,则 ok 为 false</li>\n<li><a href=\"https://learnku.com/articles/53796\">chan 的实际应用场景</a></li>\n<li>代码</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">execute</span><span class=\"params\">(arr []<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, i := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">        time.Sleep(<span class=\"number\">100</span> * time.Millisecond)</span><br><span class=\"line\">        <span class=\"built_in\">println</span>(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">execute2</span><span class=\"params\">(arr []<span class=\"type\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    sum := <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">        sum += v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    c &lt;- sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n <span class=\"type\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    x, y := <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">        c &lt;- x</span><br><span class=\"line\">        x, y = y, x+y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">close</span>(c) <span class=\"comment\">//如果不关闭通道,则在range遍历通道c时会造成阻塞</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">execute3</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i <span class=\"type\">int</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        i++</span><br><span class=\"line\">        <span class=\"built_in\">println</span>(i)</span><br><span class=\"line\">        time.Sleep(time.Second)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//并发: goroutine: goroutine间内存共享</span></span><br><span class=\"line\">    <span class=\"comment\">/*    arr := []int&#123;111, 222, 333, 444&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        arr2 := []int&#123;11, 22, 33, 44&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        arr3 := []int&#123;1, 2, 3, 4&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        go execute(arr)  //这里excute()没有返回值,而在使用goroutine时,如果有返回值的话,返回值也会被忽略</span></span><br><span class=\"line\"><span class=\"comment\">        go execute(arr2)</span></span><br><span class=\"line\"><span class=\"comment\">        execute(arr3)    // 注释掉看看</span></span><br><span class=\"line\"><span class=\"comment\">        go execute(arr3) //程序已结束,无法被执行*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通道: channel: 先入先出的队列,用于多个goroutine间传递消息</span></span><br><span class=\"line\">    <span class=\"comment\">/*arr4 := []int&#123;1, 2, 3, 4, 5&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    c := make(chan int)</span></span><br><span class=\"line\"><span class=\"comment\">    go execute2(arr4[:len(arr4)/2], c) //len()会向下取整</span></span><br><span class=\"line\"><span class=\"comment\">    go execute2(arr4[len(arr4)/2:], c)</span></span><br><span class=\"line\"><span class=\"comment\">    go execute2(arr4[:1], c)</span></span><br><span class=\"line\"><span class=\"comment\">    //execute2(arr4, c)  //加上这行会造成死锁</span></span><br><span class=\"line\"><span class=\"comment\">    sum, sum2, sum3 := &lt;-c, &lt;-c, &lt;-c</span></span><br><span class=\"line\"><span class=\"comment\">    println(sum, sum2, sum3, sum+sum2+sum3)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通道缓存</span></span><br><span class=\"line\">    <span class=\"comment\">/*c := make(chan int, 2) //设置缓存大小为2</span></span><br><span class=\"line\"><span class=\"comment\">    c &lt;- 1                 //如果未设置缓存,则此时无法存入数据1</span></span><br><span class=\"line\"><span class=\"comment\">    c &lt;- 2                 //如果缓存大小设置为1,则此时无法存入数据2,需要先取出数据1才可继续存入</span></span><br><span class=\"line\"><span class=\"comment\">    i := &lt;-c</span></span><br><span class=\"line\"><span class=\"comment\">    println(i)</span></span><br><span class=\"line\"><span class=\"comment\">    j, ok := &lt;-c //如果接收不到数据,则ok为false</span></span><br><span class=\"line\"><span class=\"comment\">    println(j, ok)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历通道</span></span><br><span class=\"line\">    <span class=\"comment\">/*c := make(chan int, 10)</span></span><br><span class=\"line\"><span class=\"comment\">    fibonacci(cap(c), c) //cap(): 获取容量</span></span><br><span class=\"line\"><span class=\"comment\">不断遍历通道c，当c中无可读取数据则阻塞等待c被写入；当c关闭则退出遍历</span></span><br><span class=\"line\"><span class=\"comment\">    for v := range c &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        println(v)</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//执行execute3()循环打印的同时等待用户输入,输入后按enter结束</span></span><br><span class=\"line\">    <span class=\"comment\">/*go execute3()</span></span><br><span class=\"line\"><span class=\"comment\">    var input string</span></span><br><span class=\"line\"><span class=\"comment\">    //fmt.Scan(input)</span></span><br><span class=\"line\"><span class=\"comment\">    fmt.Scan(&amp;input)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将execute3()改成匿名函数形式</span></span><br><span class=\"line\">    <span class=\"comment\">/*go func() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        var i int</span></span><br><span class=\"line\"><span class=\"comment\">        for &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            i++</span></span><br><span class=\"line\"><span class=\"comment\">            println(i)</span></span><br><span class=\"line\"><span class=\"comment\">            time.Sleep(time.Second)</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;()</span></span><br><span class=\"line\"><span class=\"comment\">    var input string</span></span><br><span class=\"line\"><span class=\"comment\">    fmt.Scanln(&amp;input)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生产者-消费者并发实例</span></span><br><span class=\"line\">    <span class=\"comment\">/*c := make(chan int)</span></span><br><span class=\"line\"><span class=\"comment\">    go func(c chan int) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        for &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            data := &lt;-c</span></span><br><span class=\"line\"><span class=\"comment\">            if data == 0 &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                break</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            println(data)</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;(c)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    for i := 1; i &lt; 6; i++ &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        c &lt;- i</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    c &lt;- 0*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//单向通道的几种定义方式</span></span><br><span class=\"line\">    <span class=\"comment\">/*var c1 &lt;-chan int      //声明只读通道</span></span><br><span class=\"line\"><span class=\"comment\">    var c2 chan&lt;- int      //声明只写通道</span></span><br><span class=\"line\"><span class=\"comment\">    c3 := make(&lt;-chan int) //初始化声明只读通道</span></span><br><span class=\"line\"><span class=\"comment\">    c4 := make(chan&lt;- int) //初始化声明只写通道</span></span><br><span class=\"line\"><span class=\"comment\">    c1 = c3</span></span><br><span class=\"line\"><span class=\"comment\">    c2 = c4</span></span><br><span class=\"line\"><span class=\"comment\">    println(c1, c2, c3, c4)*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"协程–chan go 后调用的函数，其返回值会被忽略。 协程间的通信： 内存共享 context channel 控制协程： context sync.Grou...","permalink":"/post/GO语言/基础/协程--chan","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E7%A8%8B%E2%80%93chan\"><span class=\"toc-text\">协程–chan</span></a></li></ol>","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"协程--chan引发panic","uid":"b8351e6b529030bde208c360539354f9","slug":"GO语言/基础/协程--chan引发panic","date":"2024-10-12T02:26:58.082Z","updated":"2024-10-19T08:23:44.049Z","comments":true,"path":"api/articles/GO语言/基础/协程--chan引发panic.json","keywords":null,"cover":"/images/cover/5.png","text":"协程–chan 引发 panic 关闭一个未初始化的 channel 会引发 panic 关闭一个已关闭的 channel 会引发 panic 向一个已关闭的 ...","permalink":"/post/GO语言/基础/协程--chan引发panic","photos":[],"count_time":{"symbolsCount":971,"symbolsTime":"1 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"context","uid":"8cc002523a8a3e559c8e18f806da49cd","slug":"GO语言/基础/context","date":"2024-10-12T02:26:57.980Z","updated":"2024-10-19T08:23:37.876Z","comments":true,"path":"api/articles/GO语言/基础/context.json","keywords":null,"cover":"/images/cover/5.png","text":"context 用途： 父协程控制子协程的生命（通过 WithCancel） 父协程向子协程传递数据（通过 WithValue）。如果 WithValue 中传...","permalink":"/post/GO语言/基础/context","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}