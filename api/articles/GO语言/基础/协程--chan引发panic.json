{"title":"协程--chan引发panic","uid":"b8351e6b529030bde208c360539354f9","slug":"GO语言/基础/协程--chan引发panic","date":"2024-10-12T02:26:58.082Z","updated":"2024-10-19T08:23:44.049Z","comments":true,"path":"api/articles/GO语言/基础/协程--chan引发panic.json","keywords":null,"cover":"/images/cover/5.png","content":"<h1 id=\"协程–chan-引发-panic\"><a href=\"#协程–chan-引发-panic\" class=\"headerlink\" title=\"协程–chan 引发 panic\"></a>协程–chan 引发 panic</h1><ol>\n<li><p>关闭一个未初始化的 channel 会引发 panic</p>\n</li>\n<li><p>关闭一个已关闭的 channel 会引发 panic</p>\n</li>\n<li><p>向一个已关闭的 channel 发送数据会引发 panic</p>\n <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ch <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">close</span>(ch) <span class=\"comment\">// 关闭一个未初始化的channel会引发panic</span></span><br><span class=\"line\"></span><br><span class=\"line\">ch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\"><span class=\"built_in\">close</span>(ch)</span><br><span class=\"line\"><span class=\"built_in\">close</span>(ch) <span class=\"comment\">// 关闭一个已关闭的channel会引发panic</span></span><br><span class=\"line\"></span><br><span class=\"line\">ch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\"><span class=\"built_in\">close</span>(ch)</span><br><span class=\"line\">ch &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125; <span class=\"comment\">// 向一个已关闭的channel发送数据会引发panic</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遍历 chan 时，如果不关闭通道，会阻塞线程，引发 panic</p>\n <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Test071001</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">    ch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ &#123;</span><br><span class=\"line\">\t\t    ch &lt;- i</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"built_in\">close</span>(ch) <span class=\"comment\">// 如果不关闭通道，外层的range遍历完数据后会阻塞，引发panic</span></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> c := <span class=\"keyword\">range</span> ch &#123;</span><br><span class=\"line\">\t    fmt.Println(c)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 如果反过来，将遍历放入协程中，即使不关闭通道也没事。因为协程阻塞不影响主程序的运行</p>\n <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Test071001</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> c := <span class=\"keyword\">range</span> ch &#123;</span><br><span class=\"line\">    \t\tfmt.Println(c)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ &#123;</span><br><span class=\"line\">\t\tch &lt;- i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","text":"协程–chan 引发 panic 关闭一个未初始化的 channel 会引发 panic 关闭一个已关闭的 channel 会引发 panic 向一个已关闭的 ...","permalink":"/post/GO语言/基础/协程--chan引发panic","photos":[],"count_time":{"symbolsCount":971,"symbolsTime":"1 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E7%A8%8B%E2%80%93chan-%E5%BC%95%E5%8F%91-panic\"><span class=\"toc-text\">协程–chan 引发 panic</span></a></li></ol>","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"协程--chan阻塞测试","uid":"de4bfe30255df688e3d880102f081573","slug":"GO语言/基础/协程--chan阻塞测试","date":"2024-10-12T02:26:58.109Z","updated":"2024-10-19T08:23:47.054Z","comments":true,"path":"api/articles/GO语言/基础/协程--chan阻塞测试.json","keywords":null,"cover":"/images/cover/5.png","text":"协程–chan 阻塞测试12345678910111213141516171819202122232425262728293031323334353637383...","permalink":"/post/GO语言/基础/协程--chan阻塞测试","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"协程--chan","uid":"2760989e79e2aad73e5334ce01559db2","slug":"GO语言/基础/协程--chan","date":"2024-10-12T02:26:58.055Z","updated":"2024-10-19T08:23:42.251Z","comments":true,"path":"api/articles/GO语言/基础/协程--chan.json","keywords":null,"cover":"/images/cover/5.png","text":"协程–chan go 后调用的函数，其返回值会被忽略。 协程间的通信： 内存共享 context channel 控制协程： context sync.Grou...","permalink":"/post/GO语言/基础/协程--chan","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}