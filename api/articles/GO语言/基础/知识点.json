{"title":"知识点","uid":"59a6b28686051f5f0b4e5a6fbd68c9a5","slug":"GO语言/基础/知识点","date":"2024-10-12T02:26:57.586Z","updated":"2024-10-19T08:23:18.503Z","comments":true,"path":"api/articles/GO语言/基础/知识点.json","keywords":null,"cover":"/images/cover/5.png","content":"<h1 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h1><h2 id=\"1-变量\"><a href=\"#1-变量\" class=\"headerlink\" title=\"1. 变量\"></a>1. 变量</h2><ol>\n<li><p>自动推断变量类型</p>\n</li>\n<li><p>全局变量：全包可见；存在未使用的全局变量时可编译通过<br>局部变量：函数内可见；存在未使用的局部变量时编译报错</p>\n</li>\n<li><p>非引用类型变量：声明后便会分配内存，可以直接使用，默认自动初始化为类型零值。<br>引用类型的变量：不可直接用，必须初始化</p>\n <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> m <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span></span><br><span class=\"line\">m[<span class=\"number\">1</span>] = <span class=\"number\">1</span> <span class=\"comment\">// error：assignment to entry in nil map</span></span><br></pre></td></tr></table></figure></li>\n<li><p>变量的初始化声明<code>:=</code>只可以用在函数中</p>\n</li>\n<li><p>变量类型：声明时不可省略，初始化时可省略</p>\n</li>\n<li><p>未使用变量为错误</p>\n</li>\n<li><p>变量<strong>运算</strong>：</p>\n <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">返回计算结果：<span class=\"string\">`+、-、*、/、% `</span></span><br><span class=\"line\">返回 <span class=\"literal\">true</span>/<span class=\"literal\">false</span>：<span class=\"string\">`==、&gt;、&lt;、&gt;=、&lt;=、!=`</span></span><br><span class=\"line\">返回 <span class=\"literal\">true</span>/<span class=\"literal\">false</span>：<span class=\"string\">`&amp;&amp;（同真则真）、||（有真则真）、！（非）`</span></span><br><span class=\"line\">返回计算结果：<span class=\"string\">`&amp;（同 1 则 1）、|（有 1 则 1）、^（同 0 异 1）、&lt;&lt;（等效于2^n，高位丢弃、低位补 0）、&gt;&gt;`</span></span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>位移：<code>y &lt;&lt; n == y * (2^n)</code>，左移 n 位就是乘以 2 的 n 次方，高位丢弃，低位补 0；右移 n 位就是除以 2 的 n 次方</li>\n<li>三目运算符： Go 语言没有三目运算符，所以不支持  ?:  形式的条件判断</li>\n</ul></blockquote>\n <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运算符优先级：(.) &gt; (*、&amp;) &gt; (++、--)</span><br><span class=\"line\">p := &amp;t.x <span class=\"comment\">// &lt;=&gt; p := &amp;(t.x)</span></span><br><span class=\"line\">*p++ <span class=\"comment\">// &lt;=&gt; (*p)++</span></span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">取余运算时，余数总是小于被除数，由此可以设置首尾相接的环。</span><br><span class=\"line\">比如一个 <span class=\"number\">0</span>~<span class=\"number\">3</span> 的环，就可以用 n%<span class=\"number\">4</span> 取余得到，每次 n++后，余数都会变：<span class=\"number\">0</span>，<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">0</span>，<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3.</span>.....</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>数据类型</strong>：<br>本质：固定内存大小的别名<br>作用：编译器预算对象(变量)分配的内存空间大小<br>分类：</p>\n<ul>\n<li>基本类型：数字、字符串和布尔值</li>\n<li>聚合类型：数组和结构体</li>\n<li>引用类型：切片、映射、通道、指针、函数、接口</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>对于引用类型的变量，存储的是内存地址，不光要声明它，还要为它分配内存空间<br>引用类型的零值为 nil<br>引用类型是指针传递，特别注意：切片是指针传递（会修改底层数组，因为切片是指向数组的指针）、数组是值传递</p></blockquote>\n</li>\n<li><p>当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，则包外可见，类似 public；如以小写字母开头，则仅包内可见，类似 protected</p>\n</li>\n</ol>\n<h2 id=\"2-常量\"><a href=\"#2-常量\" class=\"headerlink\" title=\"2. 常量\"></a>2. 常量</h2><ol>\n<li>iota：自增计数器，遇到 const 声明时重置</li>\n<li>不指定类型的常量叫 Untyped 常量,可以作不同类型使用</li>\n</ol>\n<h2 id=\"3-函数\"><a href=\"#3-函数\" class=\"headerlink\" title=\"3. 函数\"></a>3. 函数</h2><ol>\n<li><p><strong>函数</strong>：<code>func myFun()</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>直接通过包名调用：包名.myFun()</p></blockquote>\n<p> <strong>方法</strong>：<code>func (c *client) myFun()</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>需要通过结构体对象调用：c.myFun()<br>作用：自我总结：1）用来实现接口；2）限制作用域，使其只能被限定对象调用</p></blockquote>\n</li>\n<li><p>匿名函数也是需要调用才会执行，且调用时只执行当前匿名函数，不会执行外部函数</p>\n</li>\n</ol>\n<h2 id=\"4-线程\"><a href=\"#4-线程\" class=\"headerlink\" title=\"4. 线程\"></a>4. 线程</h2><ol>\n<li>使用 go 关键字创建 goroutine 时，被调用函数的返回值会被忽略</li>\n<li>goroutine 间内存共享</li>\n<li>通道的收发操作在不同的两个 goroutine 间进行. 由于通道的数据在没有接收方处理时，数据发送方会持续阻塞，因此通道的接收必定在另外一个 goroutine 中进行</li>\n<li>Chanel：当<strong>通道被关闭</strong>时，写入通道会引发 panic，读取通道会一直都是类型零值。<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>判断通道是否被关闭的两种方式：</p>\n<ol>\n<li>方式一：i, ok :&#x3D; &lt;-ch1 &#x2F;&#x2F; 通道关闭后再取值 ok&#x3D;false</li>\n<li>方式二：for i :&#x3D; range ch2 {fmt.Println(i)} &#x2F;&#x2F; 通道关闭后会退出 for range 循环</li>\n</ol></blockquote>\n</li>\n</ol>\n<h2 id=\"5-文件\"><a href=\"#5-文件\" class=\"headerlink\" title=\"5. 文件\"></a>5. 文件</h2><ol>\n<li>文件：-rwxrwxrwx，目录：drwxrwxrwx（-代表文件，d 代表目录）<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>rwx：读、写、执行权限<br>-rwx——：文件拥有者的权限；—-rwx—：文件拥有者所在的用户组的权限；——-rwx：其他所有人的权限<br>-rwxrwxrwx，对应 0777；-rw-rwxrwx，对应 0677；-r–rwxrwx，对应 0477；—-rwxrwx，对应 0077</p></blockquote>\n</li>\n</ol>\n<h2 id=\"6-其它\"><a href=\"#6-其它\" class=\"headerlink\" title=\"6. 其它\"></a>6. 其它</h2><ol>\n<li><p><code>fmt.Sprintf</code>：有返回值的格式化打印</p>\n</li>\n<li><p>指针未初始化，无法获取值</p>\n</li>\n<li><p>值传递不会影响到实际参数，引用传递会影响到实际参数</p>\n</li>\n<li><p>值接收者方法(<code>c client</code>)：会将结构体值拷贝一份，然后对副本进行操作；<br>而指针接收者方法(<code>c *client</code>)：直接操作原始结构体指针所指向的对象。</p>\n</li>\n<li><p>数组是相同数据类型的集合，结构体是不同数据类型的集合</p>\n</li>\n<li><p><strong>反射</strong>：反射的核心是两个对象，分别是  <code>reflect.Type</code>  和  <code>reflect.Value</code>。 它们分别代表了 go 语言中的类型和值。我们可以通过  <code>reflect.TypeOf</code>  和  <code>reflect.ValueOf</code>  来获取到一个变量的类型和值。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>通过反射可以获取目标的类型、值等，也可以通过反射修改其值，但是修改时要注意：</p>\n<ol>\n<li>如对结构体中字段修改，字段需可见（即首字母需要大写）</li>\n<li>当 reflect.ValueOf(目标)时，目标必须是地址。可以调用 elem()返回“地址 Value”指向的“值 Value”。<br>有些方法，是“地址 Type”或“地址 Value”无法访问的，必须转成“值”。</li>\n</ol></blockquote>\n</li>\n<li><p><strong>标签</strong> tag</p>\n<ul>\n<li>示例：<code>mapstructure:&quot;port&quot; json:&quot;port&quot; yaml:&quot;port&quot; binding:&quot;required&quot; valid:&quot;matches([0-9])&quot;</code></li>\n<li>作用：将数据与对象进行关联，可以进行序列化和反序列化。如：<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>mapstructure</code>：将配置数据读到结构体字段中<br><code>json</code>：将字段内容写入 json<br><code>yaml</code>：将字段内容写入 yaml 文件<br><code>gorm:&quot;column:name&quot;</code>：将字段与数据库列名对应需要</p></blockquote>\n</li>\n</ul>\n<p> binding 会在 <code>ShouldBindJSON()</code>时进行检查；valid 会在 <code>govalidator.ValidateStruct()</code>时进行检查</p>\n</li>\n<li><p><code>Mutex.TryLock</code>：允许在非阻塞模式下获取锁，如果锁已被获取，该函数将直接返回布尔值  false，而不是一直等待锁释放。</p>\n</li>\n<li><p>切片 slice：<br>切片是引用类型，是指向底层数组的指针，对切片的操作其实是对底层数组的操作。<br>当发生扩容时，该指针地址便会改变，因为扩容是把当前数组内容复制到一个新数组中。</p>\n</li>\n<li><p>读取 map：<code>map：value, ok := x[&quot;key&quot;]</code> # map 可以返回两个值，值 2 用来判断是否存在 key</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>不可以用值 1 判断是否存在 key，因为如果值 1 为类型零值，可能是 key 存在，但其值就是零值</p></blockquote>\n</li>\n<li><p>unsafe.Pointer：任意类型的指针。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>一般指针定义时需要指明类型，如*int，而 Pointer 可以和任意类型的指针（或者和 uintptr）相互转换。<br>uintptr：类型是一个整型，用来存储十进制的地址。指针无法进行算术运算，转换为 uintptr 后便可以了，因为它是整型。</p></blockquote>\n</li>\n<li><p>无法取地址：常量、字面量、map 中的元素</p>\n</li>\n<li><p>map、slice、function 是不可比较类型，其余都是可比较类型。如果要比较结构体、数组，其中的元素必须是可比较类型。<br>结构体比较规则：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>属性类型、个数、顺序三者都相同；</li>\n<li>属性中不含有不可以比较的类型。即如果含有 map、slice，则结构体不能用<code>==</code>比较。</li>\n</ol></blockquote>\n</li>\n<li><p>类型转换<br>数字：强转：<code>float32(num1)</code><br>字符串：<code>strconv.Atoi(&quot;1&quot;)</code>和 <code>strconv.Itoa(2)</code><br>接口：详见”接口的类型断言”</p>\n</li>\n<li><p><code>go vet</code>：代码错误检查</p>\n</li>\n<li><p><code>resp.Body.Close()</code>：请求响应后应调用该方法，避免内存泄漏</p>\n</li>\n<li><p>Go 项目程序（不包含 Test 程序）的文件层级无论多深，其当前目录始终是项目根目录</p>\n</li>\n<li><p>cmd 库：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd := exec.Command(<span class=\"string\">&quot;git&quot;</span>, <span class=\"string\">&quot;stash&quot;</span>, <span class=\"string\">&quot;list&quot;</span>)</span><br><span class=\"line\">err := cmd.Run()        <span class=\"comment\">// 无输出运行</span></span><br><span class=\"line\">out, err := cmd.CombinedOutput()        <span class=\"comment\">// 有输出运行</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>//go:generate 代码</code> # 当在终端执行 <code>go generate</code> 时，会执行该代码<br><code>//go:build haha</code> # 写在文件开头，当在终端执行 <code>go build -tags &quot;haha&quot;</code>时，会编译该文件</p>\n</li>\n<li><p>go build 未指定包或文件时，会编译当前目录</p>\n</li>\n</ol>\n","text":"知识点1. 变量 自动推断变量类型 全局变量：全包可见；存在未使用的全局变量时可编译通过局部变量：函数内可见；存在未使用的局部变量时编译报错 非引用类型变量：声...","permalink":"/post/GO语言/基础/知识点","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%9F%A5%E8%AF%86%E7%82%B9\"><span class=\"toc-text\">知识点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">1. 变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">2. 常量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3. 函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">4. 线程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5. 文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E5%85%B6%E5%AE%83\"><span class=\"toc-text\">6. 其它</span></a></li></ol></li></ol>","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"语法--基础","uid":"936cdde37333da2f8449b84496bc5908","slug":"GO语言/基础/语法--基础","date":"2024-10-12T02:26:57.700Z","updated":"2024-10-19T08:23:21.121Z","comments":true,"path":"api/articles/GO语言/基础/语法--基础.json","keywords":null,"cover":"/images/cover/5.png","text":"语法–基础目录：{ 全局变量、局部变量、几种 print 函数、几种运算符、常量 const 和 iota、指针、条件和循环语句、匿名函数、数组、切片、结构体 ...","permalink":"/post/GO语言/基础/语法--基础","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"组件通信","uid":"5fde7d8dfbaede438153d7eedc66411c","slug":"杂学/前端/vue/组件通信","date":"2024-10-12T02:10:21.762Z","updated":"2024-10-19T08:18:42.766Z","comments":true,"path":"api/articles/杂学/前端/vue/组件通信.json","keywords":null,"cover":"/images/cover/8.png","text":" pinia 全局变量 任意组件通信 defineProps 1）组件标签的变量、函数2）路由组件的参数 父子互传 defineEmits 组件标签的函数（事件...","permalink":"/post/杂学/前端/vue/组件通信","photos":[],"count_time":{"symbolsCount":286,"symbolsTime":"1 mins."},"categories":[{"name":"vue","slug":"vue","count":15,"path":"api/categories/vue.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}