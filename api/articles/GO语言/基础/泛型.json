{"title":"泛型","uid":"4ac06be8c7a43e5fa8c5ae374f435567","slug":"GO语言/基础/泛型","date":"2024-10-12T02:26:58.205Z","updated":"2024-10-19T08:23:54.314Z","comments":true,"path":"api/articles/GO语言/基础/泛型.json","keywords":null,"cover":"/images/cover/5.png","content":"<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>泛型主要用来降低代码重复率</p>\n<h2 id=\"类型约束定义\"><a href=\"#类型约束定义\" class=\"headerlink\" title=\"类型约束定义\"></a>类型约束定义</h2><ol>\n<li><p>法一：通过接口定义</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Interger <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    ~<span class=\"type\">int</span> | <span class=\"type\">int8</span> | <span class=\"type\">int16</span> | <span class=\"type\">int32</span> | ~<span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>~ 符号用来表示类型集的扩展类型，如 time.Duration 是一个 int64 的类型重定义</p></blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span>  Duration <span class=\"type\">int64</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>法二：使用时定义</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">myFun</span>[<span class=\"title\">Interger</span>  ~<span class=\"title\">int</span> | <span class=\"title\">int8</span> | <span class=\"title\">int16</span> | <span class=\"title\">int32</span> | ~<span class=\"title\">int64</span>]<span class=\"params\">(a Interger)</span></span> Interger  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"泛型使用\"><a href=\"#泛型使用\" class=\"headerlink\" title=\"泛型使用\"></a>泛型使用</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1、函数中使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">F</span>[<span class=\"title\">T</span> <span class=\"title\">Interger</span>]<span class=\"params\">(v T)</span></span> T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2、结构体中使用</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> S[T Interger] <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    v T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3、接口中使用：注意，使用了泛型的接口，就只能作为类型约束用在泛型参数中</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> I[T any] <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    *T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">myFun02</span>[<span class=\"title\">IT</span> <span class=\"title\">I</span>[<span class=\"title\">int</span>]]<span class=\"params\">(i IT)</span></span> IT &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Test01</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">    f := F[<span class=\"type\">int</span>](<span class=\"number\">3</span>)  <span class=\"comment\">// 可以自动推断类型，等价于 &lt;=&gt; f := F(3)</span></span><br><span class=\"line\">    s := S[<span class=\"type\">int</span>]&#123;<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\ta := <span class=\"number\">3</span></span><br><span class=\"line\">    i := myFun02[*<span class=\"type\">int</span>](&amp;a)  <span class=\"comment\">// 等价于 &lt;=&gt; i := myFun02(&amp;a)</span></span><br><span class=\"line\">    t.Log(f, s, *i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：以下均会报错</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法中不能使用泛型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s S)</span></span> Len[T Interger](a T) T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 泛型函数中不能定义结构体</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">F</span>[<span class=\"title\">T</span> <span class=\"title\">Interger</span>]<span class=\"params\">(v T)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span> name <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"泛型库\"><a href=\"#泛型库\" class=\"headerlink\" title=\"泛型库\"></a>泛型库</h2><ul>\n<li><p>官方库<br>  <a href=\"https://golang.org/x/exp/constraints\">https://golang.org/x/exp/constraints</a> 定义基础约束类型，如有符号，无符号，浮点，可对比类型等<br>  <a href=\"https://golang.org/x/exp/maps\">https://golang.org/x/exp/maps</a> 实现 map 的各种基础操作，如遍历，拷贝，清空等<br>  <a href=\"https://golang.org/x/exp/slices\">https://golang.org/x/exp/slices</a> 实现 slice 的各种基础操作，如是否存在，拷贝，是否相等</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用举例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Test02</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">    s := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断s中是否包含值为2的元素</span></span><br><span class=\"line\">    slices.Contains(s, <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 判断s中是否包含对2取余为0的元素</span></span><br><span class=\"line\">    slices.ContainsFunc(s, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i%<span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除s[0:1]的元素</span></span><br><span class=\"line\">    s = slices.Delete(s, <span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 当匿名函数返回true时，删除该元素。i为切片s中各个元素</span></span><br><span class=\"line\">    s = slices.DeleteFunc(s, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i%<span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>三方库<br>  <a href=\"https://golang.design/x/reflect\">https://golang.design/x/reflect</a> 对象深拷贝<br>  <a href=\"https://github.com/samber/lo\">https://github.com/samber/lo</a> slice，map，channel 的各种操作</p>\n</li>\n</ul>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>一个泛型的知识点</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyReader <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MySubReader <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tMyReader</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">F</span>[<span class=\"title\">T</span> <span class=\"title\">any</span>]<span class=\"params\">(a T, b T)</span></span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Test01</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> r MyReader</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rc MySubReader</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 前置知识：泛型需要相同类型</span></span><br><span class=\"line\">\t<span class=\"comment\">// 错误原因：这样写编译器会认为rc的类型就是MySubReader，不是MyReader</span></span><br><span class=\"line\">\tF(r, rc) <span class=\"comment\">// error: type MySubReader of rc does not match inferred type MyReader for T</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 正确写法：这样写编译器会认为rc的类型就是MyReader</span></span><br><span class=\"line\">\tF[MyReader](r, rc) <span class=\"comment\">// ok</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"泛型作用泛型主要用来降低代码重复率 类型约束定义 法一：通过接口定义 123type Interger interface { ~int | int8 | in...","permalink":"/post/GO语言/基础/泛型","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">泛型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">作用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E7%BA%A6%E6%9D%9F%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">类型约束定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">泛型使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E5%BA%93\"><span class=\"toc-text\">泛型库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">补充</span></a></li></ol></li></ol>","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"依赖注入","uid":"3f2ed32fdfa2e792bea16be6c66658d9","slug":"GO语言/基础/依赖注入","date":"2024-10-12T02:26:58.220Z","updated":"2024-10-19T08:23:56.631Z","comments":true,"path":"api/articles/GO语言/基础/依赖注入.json","keywords":null,"cover":"/images/cover/5.png","text":"依赖注入 参考 依赖注入：一段代码依赖于另一段代码，将后者以参数形式注入到前者，这就是依赖注入控制反转：控制反转是一种程序设计思想，依赖注入是实现这种思想的一种...","permalink":"/post/GO语言/基础/依赖注入","photos":[],"count_time":{"symbolsCount":284,"symbolsTime":"1 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"协程--CPU、内存","uid":"5ce8a35fbf88482d4de619a9c1063a08","slug":"GO语言/基础/协程--CPU、内存","date":"2024-10-12T02:26:58.161Z","updated":"2024-10-19T08:23:51.602Z","comments":true,"path":"api/articles/GO语言/基础/协程--CPU、内存.json","keywords":null,"cover":"/images/cover/5.png","text":"协程–CPU、内存 虚拟内存 用户程序（进程）只能使用虚拟的内存地址来获取数据，系统会将这个虚拟地址翻译成实际的物理地址。操作系统内部会对虚拟内存地址和真实的物...","permalink":"/post/GO语言/基础/协程--CPU、内存","photos":[],"count_time":{"symbolsCount":674,"symbolsTime":"1 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}