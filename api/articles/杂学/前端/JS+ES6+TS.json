{"title":"JS+ES6+TS","uid":"7a3407ec8ba34c20be717a58f2bd7ba0","slug":"杂学/前端/JS+ES6+TS","date":"2024-10-11T06:05:48.942Z","updated":"2024-10-19T08:19:21.201Z","comments":true,"path":"api/articles/杂学/前端/JS+ES6+TS.json","keywords":null,"cover":"/images/cover/4.png","content":"<ol>\n<li>ES 是语言标准，包含许多语法；<br>JS 遵守这种标准，并且额外有对 DOM 的操作；<br>TS 包含 JS，并且添加了类型检查等特性。</li>\n<li><strong>DOM</strong>（文档对象模型）：当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model），通过它可访问 HTML 文档的所有元素。<ol>\n<li>作用：可以使 JS 操作 html。<br><a href=\"https://www.bilibili.com/video/BV14r421G7zr/?spm_id_from=333.1007.tianma.4-4-14.click&vd_source=507d1879a78d5f28fa1ac6c38dbc28d0\">参考</a></li>\n<li>HTML DOM 对象如： HTML 元素, HTML 文档, window 对象、xmlHttpRequest 对象。</li>\n<li>实例：<br>通过 id 找到 HTML 元素：<code>document.getElementById()</code><br>通过标签名找到 HTML 元素：<code>document.getElementsByTagName()</code><br>通过类名找到 HTML 元素：<code>document.getElementsByClassName()</code></li>\n</ol>\n</li>\n<li>vue-cli：vue 项目脚手架，用于创建项目目录等<br>npm：是 Node 的模块管理系统，用于 Node.js 包的发布、传播、依赖控制<br>Node.js：js 运行环境</li>\n<li>关键字：<br><code>arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield</code></li>\n<li>switch 语句后面的表达式，与 case 语句后面的表示式比较运行结果时，采用的是严格相等运算符<code>===</code>，而不是相等运算符<code>==</code>，这意味着比较时不会发生类型转换。<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>===</code>：严格相等，数据类型和值都相等。</p></blockquote>\n</li>\n<li><strong>isNaN</strong> 只对数值有效，如果传入其他值，会被先转成数值（字符串、数组、对象都会先被转成数值）。<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>比如，传入字符串的时候，字符串会被先转成 NaN，所以最后返回 true，这一点要特别引起注意。<br>也就是说，isNaN 为 true 的值，有可能不是 NaN，而是一个字符串</p></blockquote>\n</li>\n<li><strong>闭包</strong>：JavaScript 中的闭包特性允许内部函数访问外部函数的局部变量。</li>\n<li>JavaScript 的隐式参数是值传递。</li>\n<li>输出数据的方式：<br><code>window.alert()</code>：弹出警告框。<br><code>document.write()</code>：方法将内容写到 HTML 文档中。<br><code>innerHTML</code>：写入到 HTML 元素。<br><code>console.log()</code>：写入到浏览器的控制台</li>\n<li><strong>数据类型</strong>：<br>值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、空（Null）、未定义（Undefined）、Symbol。<br>引用数据类型（对象类型）：对象(Object)、数组(Array)、函数(Function)，还有两个特殊的对象：正则（RegExp）和日期（Date）</li>\n<li>常用事件：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>onchange</th>\n<th>HTML 元素改变</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onclick</td>\n<td>用户点击 HTML 元素</td>\n</tr>\n<tr>\n<td>onmouseover</td>\n<td>鼠标指针移动到指定的元素上时发生</td>\n</tr>\n<tr>\n<td>onmouseout</td>\n<td>用户从一个 HTML 元素上移开鼠标时发生</td>\n</tr>\n<tr>\n<td>onkeydown</td>\n<td>用户按下键盘按键</td>\n</tr>\n<tr>\n<td>onload</td>\n<td>浏览器已完成页面的加载</td>\n</tr>\n<tr>\n<td>onunload</td>\n<td>离开页面时被触发</td>\n</tr>\n<tr>\n<td>onmousedown</td>\n<td>点击鼠标按钮触发</td>\n</tr>\n<tr>\n<td>onmouseup</td>\n<td>释放鼠标按钮触发</td>\n</tr>\n</tbody></table>\n<ol start=\"12\">\n<li><p>void 关键字：仅计算表达式但是不返回值。</p>\n</li>\n<li><p>异步函数 <strong>async</strong> function 中可以使用 await 指令，await 指令后必须跟着一个 Promise</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">asyncFunc</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"string\">&quot;Some error&quot;</span>; <span class=\"comment\">// 或者 reject(&quot;Some error&quot;)</span></span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 会输出 Some error</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">asyncFunc</span>();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>addEventListener()：添加事件监听<br><code>element.addEventListener(event, function, useCapture);</code></p>\n<ol>\n<li>第一个参数是事件的类型 (如 “click” 或 “mousedown”)</li>\n<li>第二个参数是事件触发后调用的函数</li>\n<li>第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的<ol>\n<li>冒泡：内部元素的事件会先被触发，然后再触发外部元素</li>\n<li>捕获：外部元素的事件会先被触发，然后才会触发内部元素的事件</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p><strong>解构</strong>赋值：就是将数组或对象拆解后赋值。</p>\n<ul>\n<li>对象：<code>let &#123; foo, bar &#125; = &#123; foo: &#39;aaa&#39;, bar: &#39;bbb&#39; &#125;;</code><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>等价于：<code>let &#123; foo: foo, bar: bar &#125; = &#123; foo: &#39;aaa&#39;, bar: &#39;bbb&#39; &#125;; </code> &#x2F;&#x2F;第一个 foo 是匹配模式，第二个 foo 才是变量名，真正被赋值的是变量，而不是模式。</p></blockquote>\n</li>\n<li>数组 也是一种特殊对象。<br>  数组：<code>let [a, b, c] = [1, 2, 3];</code></li>\n<li>字符串 解构时会转换成一种类似数组的对象。<br>  字符串：<code>const [a, b, c, d, e] = &#39;hello&#39;;</code></li>\n<li>数值和布尔值 解构时会转换成对象。<br>  数值：<code>let &#123;toString: s&#125; = 123;</code><br>  布尔值：<code>let &#123;toString: s&#125; = true;</code></li>\n</ul>\n</li>\n<li><p>函数的 length 属性，将返回没有指定默认值的参数个数，且不包括 rest 参数。</p>\n</li>\n<li><p>箭头函数的 this 绑定定义时所在的作用域；普通函数的 this 指向运行时所在的作用域。</p>\n</li>\n<li><p>尾调用：一个函数的最后一步，执行另一个函数（可以调用自身，称为尾递归）。注意：最后一步执行的函数不可以参与任何运算，只能是调用而已。</p>\n</li>\n<li><p><strong>扩展运算符</strong><code>...</code>的作用：</p>\n<ol>\n<li>用于数组：<code>...</code>将一个数组转为用逗号分隔的参数序列</li>\n<li>用于对象：<code>...</code>用于取出 参数对象 所有 可遍历属性 然后拷贝到当前对象</li>\n<li>用于函数：<code>...</code>将一个数组，变为参数序列</li>\n</ol>\n</li>\n<li><p><strong>箭头函数</strong>：箭头函数内部无法使用 this</p>\n<ul>\n<li>相同写法：无参<ol>\n<li><code>getVar()&#123;return var1&#125;</code></li>\n<li><code>getVar:()=&gt; var1</code></li>\n</ol>\n</li>\n<li>相同写法：有参<ol>\n<li><code>setVar(newValue)&#123;var1 = 1&#125;</code></li>\n<li><code>setVar:newValue =&gt; &#123;var1 = 1&#125;</code></li>\n<li><code>setVar:(newValue) =&gt; &#123;var1 = 1&#125;</code></li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>类型声明：<code>冒号 + 类型</code>，可以用来声明变量、参数、返回值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">toString</span>(<span class=\"params\">num: number</span>): string &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title class_\">String</span>(num);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>泛型</strong>：在定义函数时，不决定函数的参数类型，而是让调用者以参数的形式告知，函数的参数应该是什么样的类型。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> identity&lt;<span class=\"title class_\">Type</span>&gt;(<span class=\"attr\">arg</span>: <span class=\"title class_\">Type</span>): <span class=\"title class_\">Type</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","text":" ES 是语言标准，包含许多语法；JS 遵守这种标准，并且额外有对 DOM 的操作；TS 包含 JS，并且添加了类型检查等特性。 DOM（文档对象模型）：当网页...","permalink":"/post/杂学/前端/JS+ES6+TS","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"前端","slug":"前端","count":14,"path":"api/categories/前端.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"toc":"","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"localStorage","uid":"356790b52760809f94d4f6255c517b3b","slug":"杂学/前端/localStorage","date":"2024-10-11T07:09:37.370Z","updated":"2024-10-19T08:19:23.096Z","comments":true,"path":"api/articles/杂学/前端/localStorage.json","keywords":null,"cover":"/images/cover/4.png","text":"localStorage将信息存放在本地存储，可以实现关闭浏览器不清理记录。 操作： 将存放对象的数组打印成字符串：const arrObj = [{对象 1}...","permalink":"/post/杂学/前端/localStorage","photos":[],"count_time":{"symbolsCount":376,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":14,"path":"api/categories/前端.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"算法","uid":"7b15f460606fcb4d23e6a93344af8c37","slug":"杂学/数据结构/算法","date":"2024-10-11T06:01:50.424Z","updated":"2024-10-19T08:20:41.301Z","comments":true,"path":"api/articles/杂学/数据结构/算法.json","keywords":null,"cover":"/images/cover/3.png","text":"排序下面 3 个平均时间复杂度：O(n^2) 冒泡：相邻两两交换选择：当前元素与后面所有元素比较，选择出最小值后交换位置插入：当前元素与前面所有元素比较，插入到...","permalink":"/post/杂学/数据结构/算法","photos":[],"count_time":{"symbolsCount":744,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":10,"path":"api/categories/数据结构.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}