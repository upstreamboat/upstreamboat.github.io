{"title":"context","uid":"8cc002523a8a3e559c8e18f806da49cd","slug":"GO语言/基础/context","date":"2024-10-12T02:26:57.980Z","updated":"2024-10-19T08:23:37.876Z","comments":true,"path":"api/articles/GO语言/基础/context.json","keywords":null,"cover":"/images/cover/5.png","content":"<h1 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a>context</h1><ol>\n<li>用途：<ul>\n<li>父协程控制子协程的生命（通过 WithCancel）</li>\n<li>父协程向子协程传递数据（通过 WithValue）。如果 WithValue 中传递 chan，则借助通道可以变相实现子向父传递。</li>\n</ul>\n</li>\n<li>创建 context 对象的两种方式：<a href=\"https://juejin.cn/post/7244174365172236345\">区别</a><ul>\n<li>context.Background() &#x2F;&#x2F; 顶级的、无附加值的基本 Context</li>\n<li>context.TODO() &#x2F;&#x2F; 暂时的、未确定的 Context<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这两种都是创建一个 emptyCtx 实例，可以传递给子协程</p></blockquote>\n</li>\n</ul>\n</li>\n<li>传递 key-value 值：<ul>\n<li>context.<strong>WithValue</strong>() &#x2F;&#x2F; 从传参的父 context 中，派生出一个携带 key-value 信息的 context</li>\n<li>ctx.Value() &#x2F;&#x2F; 获取 ctx 实例中携带的 value，因为是 any 类型，所以需要类型断言下</li>\n</ul>\n</li>\n<li>取消执行：<ul>\n<li>context.<strong>WithCancel</strong>() &#x2F;&#x2F; 设置手动取消，会返回一个 cancel()，手动执行这个 cancel()后，ctx.Done()便不再为空</li>\n<li>context.WithTimeout() &#x2F;&#x2F; 设置超时自动取消。与 WithCancel 相比，会在设置的超时时间到期后，自动调用 cancel()</li>\n<li>WithDeadline() &#x2F;&#x2F; 也是超时自动取消，只不过参数是某个日期时间，而不是持续时间</li>\n</ul>\n</li>\n<li>当 cancel()执行后：<ul>\n<li>ctx.<strong>Done</strong>() &#x2F;&#x2F; 返回一个在上下文因取消或超时被关闭的通道</li>\n<li>Err() &#x2F;&#x2F; Err 表示在 Done 通道关闭后为何取消此上下文</li>\n<li>Deadline() &#x2F;&#x2F; 返回上下文将被取消的时间(如果有的话)</li>\n</ul>\n</li>\n<li>代码</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestContext</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//ctx, cancel := context.WithTimeout(context.Background(), time.Second * 3)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//ctx, cancel := context.WithDeadline(context.Background(), time.Now().Add(time.Second * 3))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">range</span> time.Tick(time.Second) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            selectchan &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">case</span> &lt;-ctx.Done():  <span class=\"comment\">//当cancel()调用后，Done()返回的chan中便有了值，此时读取通道条件便满足，开始执行这个case</span></span><br><span class=\"line\"></span><br><span class=\"line\">                t.Log(<span class=\"string\">&quot;time out!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"comment\">//通过return可以退出deal()协程。如不退出，则会继续循环，直到主协程执行完</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">println</span>(<span class=\"string\">&quot;--execute--&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">    time.Sleep(time.Second * <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    cancel()</span><br><span class=\"line\"></span><br><span class=\"line\">    t.Log(ctx.Err())</span><br><span class=\"line\"></span><br><span class=\"line\">    t.Log(ctx.Deadline())</span><br><span class=\"line\"></span><br><span class=\"line\">    time.Sleep(time.Second * <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//WithValue()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestContextWithValue</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx := context.Background()</span><br><span class=\"line\"></span><br><span class=\"line\">    contextWithValue(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx = context.WithValue(ctx, <span class=\"string\">&quot;traceID&quot;</span>, <span class=\"string\">&quot;12345&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    contextWithValue(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">contextWithValue</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    traceID, ok := ctx.Value(<span class=\"string\">&quot;traceID&quot;</span>).(<span class=\"type\">string</span>) <span class=\"comment\">//类型断言：是否为字符串，因为在通信过程中类型可能出现不可预知的变化</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;traceID=&quot;</span>, traceID)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;no traceID&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"context 用途： 父协程控制子协程的生命（通过 WithCancel） 父协程向子协程传递数据（通过 WithValue）。如果 WithValue 中传...","permalink":"/post/GO语言/基础/context","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#context\"><span class=\"toc-text\">context</span></a></li></ol>","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"协程--chan","uid":"2760989e79e2aad73e5334ce01559db2","slug":"GO语言/基础/协程--chan","date":"2024-10-12T02:26:58.055Z","updated":"2024-10-19T08:23:42.251Z","comments":true,"path":"api/articles/GO语言/基础/协程--chan.json","keywords":null,"cover":"/images/cover/5.png","text":"协程–chan go 后调用的函数，其返回值会被忽略。 协程间的通信： 内存共享 context channel 控制协程： context sync.Grou...","permalink":"/post/GO语言/基础/协程--chan","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"IO","uid":"d559e2cfaddfefc38af859dbdaec5c42","slug":"GO语言/基础/IO","date":"2024-10-12T02:26:57.942Z","updated":"2024-10-19T08:23:35.720Z","comments":true,"path":"api/articles/GO语言/基础/IO.json","keywords":null,"cover":"/images/cover/5.png","text":"IO io.NopCloser()：为已经被读取的请求/响应的 body 重新赋值 ioutil.Nopcloser 返回一个 io.ReadCloser,并且...","permalink":"/post/GO语言/基础/IO","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}