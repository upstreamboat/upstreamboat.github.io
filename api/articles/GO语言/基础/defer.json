{"title":"defer","uid":"314b1e74b1bdc2924db38ca5d05f8c1a","slug":"GO语言/基础/defer","date":"2024-10-12T02:26:57.883Z","updated":"2024-10-19T08:23:33.560Z","comments":true,"path":"api/articles/GO语言/基础/defer.json","keywords":null,"cover":"/images/cover/5.png","content":"<h1 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h1><ol>\n<li><a href=\"https://www.bilibili.com/video/BV1hv411x7we?p=6&vd_source=507d1879a78d5f28fa1ac6c38dbc28d0\">参考</a></li>\n<li>多个 defer 是栈存储，先入后出</li>\n<li>先 return，后 defer（按照代码执行顺序，return 是最后一步，所以后压栈，所以先弹出）</li>\n<li>defer 最大的功能是 panic 后依然有效</li>\n<li>多个 panic 会被不断覆盖（仅最后一个 panic 有效）</li>\n<li>defer 压栈会计算形参得到结果以实参入栈<br>defer 虽然是最后执行，但是代码读取 defer 这一行时，便进行了压栈，同时如果 defer 中的函数有参数，会计算参数后压栈放着等待最后执行。</li>\n<li>返回值问题：<br>a. 有名返回值，存储在上层函数栈中<br>b. 无名返回值，存储在本身函数栈中</li>\n<li>例子：</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">myFun</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    a := <span class=\"number\">1</span></span><br><span class=\"line\">    b := <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 值传递，压栈时传入的a始终为1</span></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">        b = a</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">&quot;defer: a=%d\\n&quot;</span>, a)</span><br><span class=\"line\">    &#125;(a)</span><br><span class=\"line\"></span><br><span class=\"line\">    a = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 无名返回值，返回了2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// defer: a=1</span></span><br><span class=\"line\"><span class=\"comment\">// myFUn:return: 2</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">myFun</span><span class=\"params\">()</span></span> (b <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">    a := <span class=\"number\">1</span></span><br><span class=\"line\">    b = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 值传递，压栈时传入的a始终为1</span></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">        b = a</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">&quot;defer: a=%d\\n&quot;</span>, a)</span><br><span class=\"line\">    &#125;(a)</span><br><span class=\"line\"></span><br><span class=\"line\">    a = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 有名返回值，虽然此时返回了2，但是b的作用域在上层，仍可继续使用，故在defer运算后成了1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// defer: a=1</span></span><br><span class=\"line\"><span class=\"comment\">// myFUn:return: 1</span></span><br></pre></td></tr></table></figure>\n","text":"defer 参考 多个 defer 是栈存储，先入后出 先 return，后 defer（按照代码执行顺序，return 是最后一步，所以后压栈，所以先弹出） ...","permalink":"/post/GO语言/基础/defer","photos":[],"count_time":{"symbolsCount":851,"symbolsTime":"1 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#defer\"><span class=\"toc-text\">defer</span></a></li></ol>","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"IO","uid":"d559e2cfaddfefc38af859dbdaec5c42","slug":"GO语言/基础/IO","date":"2024-10-12T02:26:57.942Z","updated":"2024-10-19T08:23:35.720Z","comments":true,"path":"api/articles/GO语言/基础/IO.json","keywords":null,"cover":"/images/cover/5.png","text":"IO io.NopCloser()：为已经被读取的请求/响应的 body 重新赋值 ioutil.Nopcloser 返回一个 io.ReadCloser,并且...","permalink":"/post/GO语言/基础/IO","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"Interface--类型断言","uid":"0cb0237168fea074f84d3cbb6f01b976","slug":"GO语言/基础/Interface--类型断言","date":"2024-10-12T02:26:57.859Z","updated":"2024-10-19T08:23:29.044Z","comments":true,"path":"api/articles/GO语言/基础/Interface--类型断言.json","keywords":null,"cover":"/images/cover/5.png","text":"Interface–类型断言作用可用于接口类型转换 要点只有接口类型的变量能进行类型断言 格式 变量 b :=变量 a.(类型) 变量 b, ok = 变量 a...","permalink":"/post/GO语言/基础/Interface--类型断言","photos":[],"count_time":{"symbolsCount":702,"symbolsTime":"1 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}