{"title":"07-堆","uid":"3efb043dafcb75dfdb0d6746e6895a19","slug":"杂学/数据结构/07-堆","date":"2024-10-11T05:52:26.741Z","updated":"2024-10-19T08:20:36.528Z","comments":true,"path":"api/articles/杂学/数据结构/07-堆.json","keywords":null,"cover":"/images/cover/3.png","content":"<ul>\n<li><p>定义</p>\n<ul>\n<li>堆是完全二叉树</li>\n<li>有序：堆中某节点的值总是不大于（大顶堆）或不小于（小顶堆）其父节点的值</li>\n<li>内存中通过数组实现</li>\n</ul>\n</li>\n<li><p>优点</p>\n<p>  可以轻易获取最大&#x2F;最小值</p>\n</li>\n<li><p>操作：</p>\n<p>  向上调整、向下调整：将树调整为符合堆的条件</p>\n</li>\n<li><p>应用：</p>\n<ul>\n<li><p>堆排序：（假设大顶堆降序排序）</p>\n<ol>\n<li><p>将堆顶元素取走存起来</p>\n</li>\n<li><p>将末尾元素换到堆顶</p>\n<p>为什么？：因为堆顶空了，得补充一个元素。如果补充的是其它位置元素，就会又空出一个位置，又需要再补。只有是末尾元素，才不需要补。</p>\n</li>\n<li><p>重新调整成堆。然后重复这三步，这样存起来的元素集合就是排好序的了。</p>\n</li>\n</ol>\n</li>\n<li><p>Top-K：如何取前&#x2F;第 k 大&#x2F;小的元素</p>\n<p>  例如：提取前 3 小的元素？[68, 40, 44, 18, 16, 24]</p>\n<p>  方法一：</p>\n<ol>\n<li>取数组前 3 个元素创建一个拥有 3 个节点的大顶堆<br>为什么是大顶堆？：堆顶是 3 个中最大的，这样后面比较时只需要比较一次即可</li>\n<li>拿数组第 4 个元素与堆顶比较，小于堆顶则将堆顶换成第 4 个元素，否则跳过</li>\n<li>如果堆顶发生了交换，调整成堆</li>\n<li>拿数组第 5 个元素继续比较，直到比较完所有。此时堆里的 3 个元素就是最小的 3 个了，依次取出即可</li>\n</ol>\n<p>  方法二：</p>\n<ol>\n<li>取数组所有元素形成小顶堆</li>\n<li>取出堆顶元素，便是第 1 小的元素</li>\n<li>调整成堆，继续取出堆顶元素，便是第 2 小的元素</li>\n<li>继续调整、取出，便是第 3 小的元素</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>数组实现堆</p>\n<p>  如堆对应的数组结构：[68, 40, 44, 18, 16, 24]</p>\n<p>  堆为何必须是完全二叉树？</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>完全二叉树是必然连续的，完美符合数组连续存储的特性；</li>\n</ol>\n<blockquote>\n<p>比如：如果不是完全二叉，那么上面数组中的 16 如何判断是 40 的叶子节点，还是 44 的叶子节点呢？</p></blockquote>\n</blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol start=\"2\">\n<li>可以避免不必要的索引浪费，提高效率</li>\n</ol>\n<blockquote>\n<p>比如：为了区分 16 是谁的子节点，就需要在 18 和 16 之间再加一个索引，该索引没有数据便被浪费了</p></blockquote>\n</blockquote>\n</li>\n<li><p><a href=\"https://cloud.tencent.com/developer/article/2299164\">参考文档</a></p>\n</li>\n</ul>\n","text":" 定义 堆是完全二叉树 有序：堆中某节点的值总是不大于（大顶堆）或不小于（小顶堆）其父节点的值 内存中通过数组实现 优点 可以轻易获取最大/最小值 操作： 向上...","permalink":"/post/杂学/数据结构/07-堆","photos":[],"count_time":{"symbolsCount":842,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":10,"path":"api/categories/数据结构.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"toc":"","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"08-图","uid":"36feb5f5be8b1bbb0ad32603cb33f232","slug":"杂学/数据结构/08-图","date":"2024-10-11T06:00:34.685Z","updated":"2024-10-19T08:20:38.848Z","comments":true,"path":"api/articles/杂学/数据结构/08-图.json","keywords":null,"cover":"/images/cover/3.png","text":"多对多关系 有向图、无向图 二维数组或链表实现 ","permalink":"/post/杂学/数据结构/08-图","photos":[],"count_time":{"symbolsCount":24,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":10,"path":"api/categories/数据结构.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"06-树","uid":"28e38fbc3eb81ab51fdb565afb016349","slug":"杂学/数据结构/06-树","date":"2024-10-11T03:51:33.697Z","updated":"2024-10-19T08:20:34.424Z","comments":true,"path":"api/articles/杂学/数据结构/06-树.json","keywords":null,"cover":"/images/cover/3.png","text":"树有根节点分叉出多个子节点，最后到叶子节点 名词解释 节点的层数（Level）：规定根节点在 1 层，其他任一节点的层数是其父节点的层数加 1； 节点的度（De...","permalink":"/post/杂学/数据结构/06-树","photos":[],"count_time":{"symbolsCount":966,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":10,"path":"api/categories/数据结构.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}