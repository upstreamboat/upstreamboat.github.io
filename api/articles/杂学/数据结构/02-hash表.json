{"title":"02-hash表","uid":"2402de26004c681128feeb782374b176","slug":"杂学/数据结构/02-hash表","date":"2024-10-11T02:37:51.582Z","updated":"2024-10-19T08:20:26.348Z","comments":true,"path":"api/articles/杂学/数据结构/02-hash表.json","keywords":null,"cover":"/images/cover/3.png","content":"<h1 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h1><p><a href=\"https://www.bilibili.com/video/BV1SZ4y1z7wT/?spm_id_from=333.337.search-card.all.click&vd_source=507d1879a78d5f28fa1ac6c38dbc28d0\">参考视频</a></p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>hash 表本质上也是一个数组，创建 hash 表时，也是开辟一块连续内存空间作为 hash 表空间，但却不是顺序连续存入元素。</p>\n<h2 id=\"图示\"><a href=\"#图示\" class=\"headerlink\" title=\"图示\"></a>图示</h2><table>\n<thead>\n<tr>\n<th>内存：</th>\n<th></th>\n<th>a,c</th>\n<th></th>\n<th></th>\n<th>b</th>\n<th>d,e,f</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>内存信息（下标）：</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n</tr>\n</tbody></table>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ol>\n<li>不考虑下标重复的情况，查找、增删改都很快，时间复杂度都为 O(1)</li>\n<li>hash 表中的键不能重复</li>\n<li>数据在内存中不连续</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>空间利用率不高，底层使用的数组中很多单元没有被利用</li>\n<li>元素是无序的，不能按照固定顺序遍历</li>\n</ol>\n<h2 id=\"存储方式\"><a href=\"#存储方式\" class=\"headerlink\" title=\"存储方式\"></a>存储方式</h2><p>内存中存储的是键值对（key-value），下标不再是连续的，而是键的 hash 值  ​ <code>​hash 值 = hash 函数( 键 )​</code></p>\n<ul>\n<li><p>hash 函数：将输入参数（通常是字符串或数值）映射成数值（hash 值）的函数。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>hash 函实现形式：除留余数法、直接定址法、平方取中法、折叠法等</p></blockquote>\n</li>\n<li><p>这种存储方式会产生两个问题：</p>\n</li>\n</ul>\n<ol>\n<li><p>多个不同的键可能得到相同的 hash 值，即同一个下标。称为 hash 冲突</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><p>解决法一：链地址法：</p>\n<blockquote>\n<p>所有 hash 值为当前下标的元素形成一个单向链表，链表的头结点存储在 hash 表中(如果该链表过长，还可以转为红黑树存储，或者直接对 hash 表进行扩容）</p></blockquote>\n</li>\n<li><p>解决法二：开发寻址法：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>遇到冲突，便去找下一个下标位置看是否为空</p></blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>通过对键 hash 运算，无法覆盖所有下标，即部分下标位置会空着。造成该 hash 表空间中的内存出现碎片化，出现内存浪费。</p>\n</li>\n</ol>\n<h2 id=\"元素查找方式\"><a href=\"#元素查找方式\" class=\"headerlink\" title=\"元素查找方式\"></a>元素查找方式</h2><p>与数组相同</p>\n","text":"散列表参考视频 说明hash 表本质上也是一个数组，创建 hash 表时，也是开辟一块连续内存空间作为 hash 表空间，但却不是顺序连续存入元素。 图示 内存...","permalink":"/post/杂学/数据结构/02-hash表","photos":[],"count_time":{"symbolsCount":681,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":10,"path":"api/categories/数据结构.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%A3%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">散列表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">说明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E7%A4%BA\"><span class=\"toc-text\">图示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">缺点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">存储方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%B4%A0%E6%9F%A5%E6%89%BE%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">元素查找方式</span></a></li></ol></li></ol>","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"03-链表","uid":"394ebf0bd609d8d89ce568e2036b5731","slug":"杂学/数据结构/03-链表","date":"2024-10-11T03:42:59.890Z","updated":"2024-10-19T08:20:27.791Z","comments":true,"path":"api/articles/杂学/数据结构/03-链表.json","keywords":null,"cover":"/images/cover/3.png","text":"链表 特点： 元素类型可以不同 大小不固定创建链表时，并不会开辟一块固定的内存空间，而是将元素存储在内存中的可用位置，这些位置可能是不连续的，通过指针联系。 内...","permalink":"/post/杂学/数据结构/03-链表","photos":[],"count_time":{"symbolsCount":467,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":10,"path":"api/categories/数据结构.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"01-数组","uid":"4b29c707a8fa743d3a9a3cecae939a88","slug":"杂学/数据结构/01-数组","date":"2024-10-11T02:32:07.162Z","updated":"2024-10-19T08:20:24.400Z","comments":true,"path":"api/articles/杂学/数据结构/01-数组.json","keywords":null,"cover":"/images/cover/3.png","text":"数组说明进程间的内存是独立的，创建数组时，开辟一块连续内存空间作为数组空间，按顺序连续存入元素。 图示 内存： a b c d e f 内存信息（下标）： 0 ...","permalink":"/post/杂学/数据结构/01-数组","photos":[],"count_time":{"symbolsCount":357,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":10,"path":"api/categories/数据结构.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}