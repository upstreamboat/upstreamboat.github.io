{"title":"Gin","uid":"1844acb7289f08bbbe7bcf325b1cd691","slug":"GO语言/基础/Gin","date":"2024-10-12T02:26:58.459Z","updated":"2024-10-19T08:24:08.834Z","comments":true,"path":"api/articles/GO语言/基础/Gin.json","keywords":null,"cover":"/images/cover/5.png","content":"<h1 id=\"Gin\"><a href=\"#Gin\" class=\"headerlink\" title=\"Gin\"></a>Gin</h1><ol>\n<li><p>学习：<em><a href=\"https://www.liwenzhou.com/posts/Go/gin/#c-0-6-0\">https://www.liwenzhou.com/posts/Go/gin/#c-0-6-0</a></em></p>\n</li>\n<li><p>获取参数：<br>context.Get()：从 Keys 中取数据<br>context.Param(“name”)：从路径中取数据<br>context.Query(“name”)：从查询参数中取数据<br>context.ShouldBindJSON(&amp;user)：从请求体中取数据</p>\n</li>\n<li><p>next()和 abort()的区别：<br>next()：暂停执行当前中间件的后续代码，立即调用 下一个中间件 或 主程序 ，并在响应后继续回到此处执行后续代码。<br>abort()：终止其它中间件程序。但不会停止当前的函数。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>例如，有一个验证当前的请求是否是认证过的  Authorization  中间件。如果验证失败(例如，密码不匹配)，调用  Abort  以确保这个请求的其他函数不会被调用。<br>Abort()和 AbortWithStatusJSON()都是中止链的调用，不同之处在于，前者不会返回给前端任何内容，而后者则可以返回给前端一个 JSON 串。</p></blockquote>\n</li>\n<li><p>PUT&#x2F;DELETE&#x2F;UPDATE&#x2F;GET&#x2F;OPTIONS<br>OPTIONS：用于获取目的资源所支持的通信选项（简单说就是支持哪种请求方法）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>跨域的情况下，浏览器会首先使用 OPTIONS 方法发起一个预检请求，来获知服务端是否允许该跨域请求</p></blockquote>\n</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGin</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置路由</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//New()和Default()的区别：Default()会在New()的基础上，集成Logger和Recover，用来打印日志和异常后操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//router := gin.New()</span></span><br><span class=\"line\"></span><br><span class=\"line\">router := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//路由组：同类请求设为一组，共用组路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//无参数路由</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//localhost:8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*router.GET(&quot;/&quot;, func(context *gin.Context) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">//context.String(http.StatusOK, &quot;hello world&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">context.JSON(http.StatusOK, gin.H&#123;&quot;message&quot;: &quot;hello world&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//带有路径参数的路由，可以用Param获取参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//localhost:8080/new/小王/22</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.GET(<span class=\"string\">&quot;/new/:name/:id&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *gin.Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">name := context.Param(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">id := context.Param(<span class=\"string\">&quot;id&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">context.String(http.StatusOK, <span class=\"string\">&quot;hello new world,%s=%v&quot;</span>, name, id)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//带有查询参数的路由，可以用Query获取参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//localhost:8080/hello?name=小王</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*route.GET(&quot;/hello&quot;, func(context *gin.Context) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">name := context.Query(&quot;name&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">context.JSON(http.StatusOK, gin.H&#123;&quot;message&quot;: &quot;hello &quot; + name&#125;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置cookie</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*router.GET(&quot;/set-cookie&quot;, func(context *gin.Context) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">context.SetCookie(&quot;user&quot;, &quot;jane&quot;, 3600, &quot;/&quot;, &quot;localhost&quot;, false, true)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">context.String(http.StatusOK, &quot;set cookie&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">router.GET(&quot;get-cookie&quot;, func(context *gin.Context) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">user, err := context.Cookie(&quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">if err == nil &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">context.String(http.StatusOK, &quot;%s get cookie&quot;, user)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">context.String(http.StatusNotFound, &quot;cookie not exist&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表单处理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发送post请求到localhost:8080/submit-form,在body中添加两个表单元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*router.POST(&quot;/submit-form&quot;, func(context *gin.Context) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">name := context.PostForm(&quot;name&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">email := context.PostForm(&quot;email&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">context.String(http.StatusOK, &quot;name=%s,email=%s&quot;, name, email)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//中间件 + Json处理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//中间件（Middleware）是一种在应用程序执行之前或之后再执行的功能组件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*router.Use(middleware1) //使用自定义的中间件LoggerMiddleware打印日志</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">router.Use(middleware2) //注意看执行顺序</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">router.POST(&quot;submit-json&quot;, func(context *gin.Context) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">var user User</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">err := context.ShouldBindJSON(&amp;user)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">//err := context.BindJSON(&amp;user)  //与ShouldBindJSON相比，BindJSON会在header中返回一个状态码400</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">if err == nil &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">context.JSON(http.StatusOK, gin.H&#123;&quot;message&quot;: &quot;analyse json success&quot;, &quot;data&quot;: user&#125;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">t.Log(user)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">context.String(http.StatusNotFound, &quot;analyse json failed&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//重定向</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*router.GET(&quot;/redirect&quot;, func(context *gin.Context) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">context.Redirect(http.StatusMovedPermanently, &quot; [https://www.example.com](https://www.example.com)&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//模板渲染</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置模板文件目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.LoadHTMLGlob(<span class=\"string\">&quot;templates/*&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在模板文件目录下创建index.tpl文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.GET(<span class=\"string\">&quot;/template&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *gin.Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">context.HTML(http.StatusOK, <span class=\"string\">&quot;index.tpl&quot;</span>, gin.H&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;jane&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.Run(<span class=\"string\">&quot;:8080&quot;</span>) <span class=\"comment\">// 监听并在8080端口上启动服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//因为作用域，这里Name和Email的首字母必须大写</span></span><br><span class=\"line\"></span><br><span class=\"line\">Name  <span class=\"type\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\"></span><br><span class=\"line\">Email <span class=\"type\">string</span> <span class=\"string\">`json:&quot;email&quot;`</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">middleware1</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">log.Print(<span class=\"string\">&quot;1--start&quot;</span>) <span class=\"comment\">// 处理请求前的日志记录逻辑</span></span><br><span class=\"line\"></span><br><span class=\"line\">c.Next()              <span class=\"comment\">//调用下一个中间件或请求处理程序</span></span><br><span class=\"line\"></span><br><span class=\"line\">log.Print(<span class=\"string\">&quot;1--end&quot;</span>)   <span class=\"comment\">// 处理响应后的日志记录逻辑</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">middleware2</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;2--start&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">c.Next()</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;2--end&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"Gin 学习：https://www.liwenzhou.com/posts/Go/gin/#c-0-6-0 获取参数：context.Get()：从 Keys...","permalink":"/post/GO语言/基础/Gin","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Gin\"><span class=\"toc-text\">Gin</span></a></li></ol>","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Gorm","uid":"2a28425a1a7d4e14f42cf293b79ac333","slug":"GO语言/基础/Gorm","date":"2024-10-12T02:26:58.608Z","updated":"2024-10-19T08:24:11.029Z","comments":true,"path":"api/articles/GO语言/基础/Gorm.json","keywords":null,"cover":"/images/cover/5.png","text":"Gorm sql 预加载 Preload()函数可以优化查询性能，怎么优化的？Preload()：用于查询数据库中有关联的表。会在查询时，将关联表的数据一并查出...","permalink":"/post/GO语言/基础/Gorm","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"make、type、range","uid":"c007e764a72957fafa5b15a6941bd0e2","slug":"GO语言/基础/make、type、range","date":"2024-10-12T02:26:58.406Z","updated":"2024-10-19T08:24:06.563Z","comments":true,"path":"api/articles/GO语言/基础/make、type、range.json","keywords":null,"cover":"/images/cover/5.png","text":"make、type、range make 仅用于这三种引用类型的初始化：切片 Slice、集合 Map、通道 channel 1234567s := make(...","permalink":"/post/GO语言/基础/make、type、range","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}