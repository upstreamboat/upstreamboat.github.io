{"title":"自定义类型可以有方法","uid":"4fd198b7eacb73f09ceb8fc86c69789a","slug":"GO语言/运用/自定义类型可以有方法","date":"2024-10-12T02:28:08.854Z","updated":"2024-10-19T08:25:22.845Z","comments":true,"path":"api/articles/GO语言/运用/自定义类型可以有方法.json","keywords":null,"cover":"/images/cover/5.png","content":"<h1 id=\"自定义类型可以有方法\"><a href=\"#自定义类型可以有方法\" class=\"headerlink\" title=\"自定义类型可以有方法\"></a>自定义类型可以有方法</h1><ul>\n<li><p>自定义类型有两种：</p>\n<ol>\n<li>结构体</li>\n<li>别名</li>\n</ol>\n</li>\n<li><p>自定义类型可以有方法：<br>    ​go 中非引用类型的变量在声明后便已经分配内存了，可以直接使用 ​</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//type IT struct &#123;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> IT <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *IT)</span></span> fun01() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">&quot;p-fun01&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Test1356</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a IT</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\"></span><br><span class=\"line\">    a.fun01()  <span class=\"comment\">// go中非引用类型的变量在声明后便已经分配内存了，因此可以调用方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","text":"自定义类型可以有方法 自定义类型有两种： 结构体 别名 自定义类型可以有方法： ​go 中非引用类型的变量在声明后便已经分配内存了，可以直接使用 ​ 12345...","permalink":"/post/GO语言/运用/自定义类型可以有方法","photos":[],"count_time":{"symbolsCount":337,"symbolsTime":"1 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E5%8F%AF%E4%BB%A5%E6%9C%89%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">自定义类型可以有方法</span></a></li></ol>","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"关于gorm参数问题","uid":"ffad629c88d3973ffcc37250426c5ddb","slug":"GO语言/运用/关于gorm参数问题","date":"2024-10-12T02:28:08.867Z","updated":"2024-10-19T08:25:24.493Z","comments":true,"path":"api/articles/GO语言/运用/关于gorm参数问题.json","keywords":null,"cover":"/images/cover/5.png","text":"关于 gorm 参数问题 var user *models.User var user *models.User = &models.User{} var us...","permalink":"/post/GO语言/运用/关于gorm参数问题","photos":[],"count_time":{"symbolsCount":281,"symbolsTime":"1 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"切片扩容机制","uid":"88143d9759619260f83f1d39234583ee","slug":"GO语言/运用/切片扩容机制","date":"2024-10-12T02:28:08.838Z","updated":"2024-10-19T08:25:21.629Z","comments":true,"path":"api/articles/GO语言/运用/切片扩容机制.json","keywords":null,"cover":"/images/cover/5.png","text":"切片扩容机制 学习（扩容机制从视频 4min 开始）学习 2 总结：： 第一步：计算容量 1234567891011121314var needCap int ...","permalink":"/post/GO语言/运用/切片扩容机制","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}