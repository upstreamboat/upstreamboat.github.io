{"title":"IO","uid":"d559e2cfaddfefc38af859dbdaec5c42","slug":"GO语言/基础/IO","date":"2024-10-12T02:26:57.942Z","updated":"2024-10-19T08:23:35.720Z","comments":true,"path":"api/articles/GO语言/基础/IO.json","keywords":null,"cover":"/images/cover/5.png","content":"<h1 id=\"IO\"><a href=\"#IO\" class=\"headerlink\" title=\"IO\"></a>IO</h1><ol>\n<li><p><code>io.NopCloser()</code>：为已经被读取的请求&#x2F;响应的 body 重新赋值</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>ioutil.Nopcloser 返回一个 io.ReadCloser,并且 close()方法没有任何操作 no-op.<br>我们在操作 <code>req *http.Request</code> 和 <code>response *http.Response</code> 的时候，有时候需要读取 Body,但是读了之后 Body 里面就被清空了，因比我们需要将读取的内容又重新赋值给 Body。它的类型为 <code>io.Readc1oser</code>。</p></blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(response *http.Response)</span></span> <span class=\"type\">error</span>&#123;</span><br><span class=\"line\">\tcont,_ := iouti1.ReadAll(response.Body)</span><br><span class=\"line\">\tfmt.Println(<span class=\"type\">string</span>(cont))</span><br><span class=\"line\"></span><br><span class=\"line\">\tresponse.Body = ioutil.Nopcloser(bytes.NewReader(cont))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>代码</p>\n</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;bufio&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestIO</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*reader := strings.NewReader(&quot;new reader create&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    t.Log(reader.Len())</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    b := make([]byte, 5)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    for &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        p, err := reader.Read(b) //最大按照b的长度读取，读取后b的值被覆盖，reader的值减少</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //p, err := reader.ReadByte()  //按一个字节长度读取</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        if err != nil &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">            if err == io.EOF &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">                break</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">            t.Log(err)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">            os.Exit(99)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        t.Log(string(b[:p]))</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//pipe</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*re, wr := io.Pipe()</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    go func() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        wr.Write([]byte(&quot;adsafd&quot;))</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        wr.Close()</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;()</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    www := make([]byte, 10)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    re.Read(www)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    t.Log(string(www))*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//为什么读取失败？</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//fil, _ := os.Create(&quot;D:\\\\test.txt&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//defer fil.Close()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">////写入文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//io.WriteString(fil, &quot;asaajja&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//b, rerr := io.ReadAll(fil)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//dd := make([]byte, 10)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//b, rerr := io.ReadFull(fil, dd)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//t.Log(string(dd), &quot;,&quot;, b, rerr)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fil, _ := os.Open(<span class=\"string\">&quot;D:\\\\test.txt&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> fil.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    rb := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    fil.Read(rb)</span><br><span class=\"line\"></span><br><span class=\"line\">    t.Log(<span class=\"type\">string</span>(rb))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//re := strings.NewReader(&quot;ddsdsaads&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">////r := bufio.NewReader(re)  //创建缓冲区</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//io.Copy(os.Stdout, re)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//标准输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//io.WriteString(os.Stdout, &quot;dsas&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    filee, _ := os.Stat(<span class=\"string\">&quot;D:\\\\test.txt&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    t.Log(filee.Mode())</span><br><span class=\"line\"></span><br><span class=\"line\">    eee := fil.Chmod(<span class=\"number\">0777</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> eee != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        t.Log(eee)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    byt := []<span class=\"type\">byte</span>(<span class=\"string\">&quot;dad&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    ll, errr := fil.Write(byt)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> errr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        t.Log(errr)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    t.Log(ll, <span class=\"type\">string</span>(byt))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestIO2</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//注意赋予os.O_RDWR权限，否则无法写入</span></span><br><span class=\"line\"></span><br><span class=\"line\">    filee, _ := os.OpenFile(<span class=\"string\">&quot;D:\\\\test.txt&quot;</span>, os.O_RDWR, <span class=\"number\">0777</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> filee.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//直接写入文件，会覆盖原内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//filee.WriteString(&quot;aaaaaa&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    bf := bufio.NewReader(filee)</span><br><span class=\"line\"></span><br><span class=\"line\">    wf := bufio.NewWriter(filee)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取文件，以“=”作为分割，读取的内容包含“=”及“=”前的内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">    str, errr := bf.ReadString(<span class=\"string\">&#x27;=&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> errr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        t.Log(errr)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    t.Log(str)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这里会追加内容而不是覆盖，因为bf读取操作把光标移动到了文件最后</span></span><br><span class=\"line\"></span><br><span class=\"line\">    wf.WriteString(<span class=\"string\">&quot;vvvvv&quot;</span>) <span class=\"comment\">//如果把这里的写入提到bf读取前面，那么光标会停在写入的最后一个字节后（注意不是文件的最后）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    wf.Flush()              <span class=\"comment\">//将缓冲中的内容写入文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"IO io.NopCloser()：为已经被读取的请求/响应的 body 重新赋值 ioutil.Nopcloser 返回一个 io.ReadCloser,并且...","permalink":"/post/GO语言/基础/IO","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#IO\"><span class=\"toc-text\">IO</span></a></li></ol>","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"context","uid":"8cc002523a8a3e559c8e18f806da49cd","slug":"GO语言/基础/context","date":"2024-10-12T02:26:57.980Z","updated":"2024-10-19T08:23:37.876Z","comments":true,"path":"api/articles/GO语言/基础/context.json","keywords":null,"cover":"/images/cover/5.png","text":"context 用途： 父协程控制子协程的生命（通过 WithCancel） 父协程向子协程传递数据（通过 WithValue）。如果 WithValue 中传...","permalink":"/post/GO语言/基础/context","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"defer","uid":"314b1e74b1bdc2924db38ca5d05f8c1a","slug":"GO语言/基础/defer","date":"2024-10-12T02:26:57.883Z","updated":"2024-10-19T08:23:33.560Z","comments":true,"path":"api/articles/GO语言/基础/defer.json","keywords":null,"cover":"/images/cover/5.png","text":"defer 参考 多个 defer 是栈存储，先入后出 先 return，后 defer（按照代码执行顺序，return 是最后一步，所以后压栈，所以先弹出） ...","permalink":"/post/GO语言/基础/defer","photos":[],"count_time":{"symbolsCount":851,"symbolsTime":"1 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}