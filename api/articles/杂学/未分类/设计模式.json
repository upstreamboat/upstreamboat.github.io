{"title":"设计模式","uid":"deffdaaa2a24a19ee257667b3b36743c","slug":"杂学/未分类/设计模式","date":"2024-10-09T02:09:35.638Z","updated":"2024-10-19T08:21:39.815Z","comments":true,"path":"api/articles/杂学/未分类/设计模式.json","keywords":null,"cover":"/images/cover/1.png","content":"<h1 id=\"适配器\"><a href=\"#适配器\" class=\"headerlink\" title=\"适配器\"></a>适配器</h1><p>通过创建一个中间转换的适配器，来将一个接口改造成用户需要的另一个接口。在不修改现有代码的情况下，使两个不兼容的接口能够工作。</p>\n<h1 id=\"观察者\"><a href=\"#观察者\" class=\"headerlink\" title=\"观察者\"></a>观察者</h1><p>当发布者的对象有修改，则调用订阅者提供的方法告知它们</p>\n<h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><p>代码增强，在原代码逻辑前后增加一些代码逻辑。访问者不直接访问目标，通过代理访问。代理持有目标对象。</p>\n<h2 id=\"1-分类\"><a href=\"#1-分类\" class=\"headerlink\" title=\"1. 分类\"></a>1. 分类</h2><p>静态代理：编码时便写定的代理</p>\n<p>动态代理：运行时通过反射获取的代理</p>\n<h2 id=\"2-优缺点\"><a href=\"#2-优缺点\" class=\"headerlink\" title=\"2. 优缺点\"></a>2. 优缺点</h2><ol>\n<li><p>优点：</p>\n<ul>\n<li>代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</li>\n<li>代理对象可以扩展目标对象的功能；</li>\n<li>代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度，增加了程序的可扩展性：</li>\n</ul>\n</li>\n<li><p>缺点：</p>\n<ul>\n<li>静态代理模式会造成系统设计中类的数量增加，但动态代理可以解决这个问题；</li>\n<li>在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢；</li>\n<li>增加了系统的复杂度；</li>\n</ul>\n</li>\n<li><p>代理模式与装饰者模式：<br>十分相像但目的不同。代理会严格将访问对象和受控对象分离开来，一个代理仅仅只负责一个类，这与装饰器模式是不同的，对于装饰器模式来说，目标对象就是访问对象所持有的。<br>此外虚拟代理的实现与装饰者模式实现是不同的，虚拟代理一开始并不持有远程服务器的资源对象，而是对域名和文件名进行解析才得到该对象，在我们的代码中我们要么传入一个实例，要么让代理持有一个实例，但在虚拟代理中，我么传入一个虚拟的文件资源，虚拟代理对远程服务器进行解析才会获得真实的对象实例，这一点是不同的。</p>\n</li>\n</ol>\n<h1 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h1><p>为什么要用工厂：</p>\n<ol>\n<li><p>解耦：分离对象的创建和使用。当创建对象的过程改变，不需要到每个使用对象的地方进行修改。</p>\n</li>\n<li><p>减少代码重复：不需要在使用对象前，都写一堆创建对象的过程的代码。</p>\n</li>\n</ol>\n<p>例子：比如：创建数据库对象。</p>\n<p>使用理解：<br>首先，工厂模式是为了解耦：把对象的创建和使用的过程分开。就是 Class A 想调用 Class B，那么 A 只是调用 B 的方法，而至于 B 的实例化，就交给工厂类。</p>\n<p>其次，工厂模式可以降低代码重复。如果创建对象 B 的过程都很复杂，需要一定的代码量，而且很多地方都要用到，那么就会有很多的重复代码。我们可以这些创建对象 B 的代码放到工厂里统一管理。既减少了重复代码，也方便以后对 B 的创建过程的修改维护。（当然，我个人觉得也可以把这些创建过程的代码放到类的构造函数里，同样可以降低重复率，而且构造函数本身的作用也是初始化对象。不过，这样也会导致构造函数过于复杂，做的事太多，不符合设计原则。）</p>\n<p>由于创建过程都由工厂统一管理，所以发生业务逻辑变化，不需要找到所有需要创建 B 的地方去逐个修正，只需要在工厂里修改即可，降低维护成本。同理，想把所有调用 B 的地方改成 B 的子类 B1，只需要在对应生产 B 的工厂中或者工厂的方法中修改其生产的对象为 B1 即可，而不需要找到所有的 new B（）改为 new B1()。</p>\n<p>另外，因为工厂管理了对象的创建逻辑，使用者并不需要知道具体的创建过程，只管使用即可，减少了使用者因为创建逻辑导致的错误。</p>\n<p>举个例子：</p>\n<p>一个数据库工厂：可以返回一个数据库实例，可以是 mysql，oracle 等。</p>\n<p>这个工厂就可以把数据库连接需要的用户名，地址，密码等封装好，直接返回对应的数据库对象就好。不需要调用者自己初始化，减少了写错密码等等这些错误。调用者只负责使用，不需要管怎么去创建、初始化对象。</p>\n","text":"适配器通过创建一个中间转换的适配器，来将一个接口改造成用户需要的另一个接口。在不修改现有代码的情况下，使两个不兼容的接口能够工作。 观察者当发布者的对象有修改，...","permalink":"/post/杂学/未分类/设计模式","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"未分类","slug":"未分类","count":25,"path":"api/categories/未分类.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%80%82%E9%85%8D%E5%99%A8\"><span class=\"toc-text\">适配器</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A7%82%E5%AF%9F%E8%80%85\"><span class=\"toc-text\">观察者</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">代理模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">1. 分类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">2. 优缺点</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">工厂模式</span></a></li></ol>","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"index","uid":"0fed0bef913e91bf625068542167e100","slug":"index","date":"2024-10-09T07:32:00.252Z","updated":"2024-10-15T00:53:00.586Z","comments":true,"path":"api/articles/index.json","keywords":null,"cover":null,"text":"杂学Mysql01-事务02-引擎03-性能04-索引05-索引规则06-知识点 前端泛型跨域解决网络协议网址定位符axiosCookie、Session、To...","permalink":"/post/index","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"编码","uid":"2ae7625fefa702e7b0a5f4cd2c057f78","slug":"杂学/未分类/编码","date":"2024-10-09T02:09:35.637Z","updated":"2024-10-19T08:21:37.897Z","comments":true,"path":"api/articles/杂学/未分类/编码.json","keywords":null,"cover":"/images/cover/1.png","text":"ASICII 共 128 个，仅包含一些符号和英文字母 GBK 是字符集也是编码格式包含 ASICII 码，也包含了中文等字符 Unicode 仅是字符集，不是...","permalink":"/post/杂学/未分类/编码","photos":[],"count_time":{"symbolsCount":237,"symbolsTime":"1 mins."},"categories":[{"name":"未分类","slug":"未分类","count":25,"path":"api/categories/未分类.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}