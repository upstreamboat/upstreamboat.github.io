{"title":"语法--进阶","uid":"3aebc06e8b6daa57452d876cf23759fc","slug":"GO语言/基础/语法--进阶","date":"2024-10-12T02:26:57.810Z","updated":"2024-10-19T08:23:24.142Z","comments":true,"path":"api/articles/GO语言/基础/语法--进阶.json","keywords":null,"cover":"/images/cover/5.png","content":"<h1 id=\"语法–进阶\"><a href=\"#语法–进阶\" class=\"headerlink\" title=\"语法–进阶\"></a>语法–进阶</h1><ol>\n<li><p>异常处理（defer、panic、recover）</p>\n</li>\n<li><p>整型和字符串相互转换</p>\n</li>\n<li><p>os 库</p>\n</li>\n<li><p>同步 sync（syncGroup、syncMap、select 通道条件语句、runtime）<br><strong>sync.Pool</strong>：用于复用对象，以减少频繁的内存分配和垃圾回收带来的性能损耗。<a href=\"https://zhuanlan.zhihu.com/p/663583910\">参考</a><br><strong>sync.Mutex</strong>：锁</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Mutex 是最简单的一种锁类型，同时也比较暴力，当一个 goroutine 获得了 Mutex 后，其他 goroutine 就只能乖乖等到这个 goroutine 释放该 Mutex<br> RWMutex 相对友好些，是经典的单写多读模型<br>atomic 包：原子操作，针对基本数据类型可以使用原子操作来保证并发安全，性能比加锁操作更好</p></blockquote>\n<p> <strong>sync.Map</strong>：线程安全的。新增元素性能差，仅为 普通的 map + 锁 的一半；但是查、删性能更好，因为其内部维护了一个 read 结构，查、删时不需要加锁<br> **sync.Once()**：只执行一次</p>\n</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;runtime&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strconv&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//异常处理</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\tdefer</span></span><br><span class=\"line\"><span class=\"comment\">\tpanic</span></span><br><span class=\"line\"><span class=\"comment\">\trecover</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestException</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//defer后面跟函数调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">defer</span> t.Log(<span class=\"string\">&quot;TestException finish&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//recover()必须与defer连用。如果未出现panic，则recover()为nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> err:=<span class=\"built_in\">recover</span>(); err!= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">t.Log(<span class=\"string\">&quot;recover finish&quot;</span>,err)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">t.Log(<span class=\"string\">&quot;TestException star&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遇到panic，程序崩溃，直接运行defer，之后输出panic的信息和打印错误栈轨迹</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">panic</span>(<span class=\"string\">&quot;errro!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">t.Log(<span class=\"string\">&quot;arrive here?&quot;</span>) <span class=\"comment\">//无法到达的语句</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestOS</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">fil, err := os.Create(<span class=\"string\">&quot;D:\\\\test.txt&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">handleError(err)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">err2 := fil.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">handleError(err2)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123;...调用fil的相关函数...&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//文件信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">filStat, err2 := os.Stat(<span class=\"string\">&quot;D:\\\\test.txt&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">handleError(err2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123;...调用filStat的相关函数...&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">t.Log(filStat.Name())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打开文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//os.Open(&quot;D:\\\\test.txt&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//os.OpenFile(&quot;D:\\\\test.txt&quot;,os.O_RDWR,0777)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改文件权限</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//os.Chmod(&quot;D:\\\\test.txt&quot;,0666)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//fil.Chmod(0666)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//进程id</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//os.Getpid()</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleError</span><span class=\"params\">(err <span class=\"type\">error</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;error happened&quot;</span>, err)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSynchronization</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">lock := sync.Mutex&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//rwlock:=sync.RWMutex&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">wg := sync.WaitGroup&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sum := <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">wg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//runtime的几个函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">runtime.Gosched() <span class=\"comment\">//先赋予时间片给其它协程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//runtime.Goexit()  //退出当前协程，结束前会先执行已注册的defer语句</span></span><br><span class=\"line\"></span><br><span class=\"line\">runtime.GOMAXPROCS(<span class=\"number\">1</span>) <span class=\"comment\">//选择调度器数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">lock.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">sum += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">t.Log(<span class=\"string\">&quot;fun: &quot;</span>, sum, <span class=\"string\">&quot; &quot;</span>, i)</span><br><span class=\"line\"></span><br><span class=\"line\">lock.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">wg.Done()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">wg.Wait()</span><br><span class=\"line\"></span><br><span class=\"line\">t.Log(<span class=\"string\">&quot;--finish--&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//SyncMap</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSyncmap</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">syncM := sync.Map&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">syncM.Store(<span class=\"string\">&quot;a&quot;</span>, <span class=\"number\">97</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">syncM.Store(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">65</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">syncM.Load(<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">syncM.Delete(<span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">syncM.Range(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(key, value any)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">t.Log(key, <span class=\"string\">&quot; = &quot;</span>, value) <span class=\"comment\">//遍历获取的元素顺序不固定</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span>              <span class=\"comment\">//如果为false，则退出遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LoadOrStore()：如果提供的key存在，则返回已存在的值(Load)，否则保存提供的键值(Store)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//select通道条件语句</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSelect</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> c &lt;- <span class=\"number\">1</span>: <span class=\"comment\">//接收数据成功，则执行这个case</span></span><br><span class=\"line\"></span><br><span class=\"line\">t.Log(<span class=\"string\">&quot;write&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> cc, _ := &lt;-c: <span class=\"comment\">//读取数据成功，则执行这个case</span></span><br><span class=\"line\"></span><br><span class=\"line\">t.Log(cc)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">default</span>: <span class=\"comment\">//都不成功执行这句。但若上面的多个case都成功了，则随机执行上面成功的case中的一个</span></span><br><span class=\"line\"></span><br><span class=\"line\">t.Log(<span class=\"string\">&quot;no&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>syncMap 的性能测试：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> syncMap *sync.Map</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">syncMap = &amp;sync.Map&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">storeSyncMap</span><span class=\"params\">(k, v <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">syncMap.Store(k, v)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">deleteSyncMap</span><span class=\"params\">(k <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">syncMap.Delete(k)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Benchmark1</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">b.ResetTimer()</span><br><span class=\"line\"></span><br><span class=\"line\">b.RunParallel(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(pb *testing.PB)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">r := rand.New(rand.NewSource(time.Now().Unix()))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> pb.Next() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">k := r.Intn(<span class=\"number\">1000000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">storeSyncMap(k, k)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">b.StopTimer()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"语法–进阶 异常处理（defer、panic、recover） 整型和字符串相互转换 os 库 同步 sync（syncGroup、syncMap、select...","permalink":"/post/GO语言/基础/语法--进阶","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95%E2%80%93%E8%BF%9B%E9%98%B6\"><span class=\"toc-text\">语法–进阶</span></a></li></ol>","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Interface","uid":"83ec08d7c30843102113f6d86ff9f083","slug":"GO语言/基础/Interface","date":"2024-10-12T02:26:57.839Z","updated":"2024-10-19T08:23:26.866Z","comments":true,"path":"api/articles/GO语言/基础/Interface.json","keywords":null,"cover":"/images/cover/5.png","text":"Interface 如果一个结构体实现了接口的所有方法，那么该结构体变实现了该接口，满足里氏替换原则。 如果结构体 A 是结构体 B 中的字段，那么 A 类似是...","permalink":"/post/GO语言/基础/Interface","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"语法--基础","uid":"936cdde37333da2f8449b84496bc5908","slug":"GO语言/基础/语法--基础","date":"2024-10-12T02:26:57.700Z","updated":"2024-10-19T08:23:21.121Z","comments":true,"path":"api/articles/GO语言/基础/语法--基础.json","keywords":null,"cover":"/images/cover/5.png","text":"语法–基础目录：{ 全局变量、局部变量、几种 print 函数、几种运算符、常量 const 和 iota、指针、条件和循环语句、匿名函数、数组、切片、结构体 ...","permalink":"/post/GO语言/基础/语法--基础","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}