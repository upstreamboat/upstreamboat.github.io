{"title":"Interface--类型断言","uid":"0cb0237168fea074f84d3cbb6f01b976","slug":"GO语言/基础/Interface--类型断言","date":"2024-10-12T02:26:57.859Z","updated":"2024-10-19T08:23:29.044Z","comments":true,"path":"api/articles/GO语言/基础/Interface--类型断言.json","keywords":null,"cover":"/images/cover/5.png","content":"<h1 id=\"Interface–类型断言\"><a href=\"#Interface–类型断言\" class=\"headerlink\" title=\"Interface–类型断言\"></a>Interface–类型断言</h1><h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>可用于接口类型转换</p>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><p>只有接口类型的变量能进行类型断言</p>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><ol>\n<li><p>变量 b :&#x3D;变量 a.(类型)</p>\n</li>\n<li><p>变量 b, ok &#x3D; 变量 a.(类型)</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>建议使用第二种格式，因为如果使用第 1 种，出错的话程序直接 panic 了。比如：</p></blockquote>\n <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//c=context.WithValue(c,&quot;trade&quot;,tradeChannel) // 如果不写这句，便直接获取，使用第1种格式会panic</span></span><br><span class=\"line\">trade,ok: = c.Value(<span class=\"string\">&quot;trade&quot;</span>).(<span class=\"keyword\">chan</span> <span class=\"keyword\">interface</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> AA <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Test1356</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">    e = <span class=\"string\">&quot;eee&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tresult, ok := e.(<span class=\"type\">string</span>) <span class=\"comment\">// 断言成功后，result是string类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(result, ok)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%T\\n&quot;</span>, result)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> f AA</span><br><span class=\"line\">    f = <span class=\"string\">&quot;fff&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    result, ok = f.(<span class=\"type\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(result, ok)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运用\"><a href=\"#运用\" class=\"headerlink\" title=\"运用\"></a>运用</h2><p>switch 对象.(type) {} 用于根据对象类型做不同处理</p>\n","text":"Interface–类型断言作用可用于接口类型转换 要点只有接口类型的变量能进行类型断言 格式 变量 b :=变量 a.(类型) 变量 b, ok = 变量 a...","permalink":"/post/GO语言/基础/Interface--类型断言","photos":[],"count_time":{"symbolsCount":702,"symbolsTime":"1 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Interface%E2%80%93%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">Interface–类型断言</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">作用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A6%81%E7%82%B9\"><span class=\"toc-text\">要点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">格式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%94%A8\"><span class=\"toc-text\">运用</span></a></li></ol></li></ol>","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"defer","uid":"314b1e74b1bdc2924db38ca5d05f8c1a","slug":"GO语言/基础/defer","date":"2024-10-12T02:26:57.883Z","updated":"2024-10-19T08:23:33.560Z","comments":true,"path":"api/articles/GO语言/基础/defer.json","keywords":null,"cover":"/images/cover/5.png","text":"defer 参考 多个 defer 是栈存储，先入后出 先 return，后 defer（按照代码执行顺序，return 是最后一步，所以后压栈，所以先弹出） ...","permalink":"/post/GO语言/基础/defer","photos":[],"count_time":{"symbolsCount":851,"symbolsTime":"1 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"Interface","uid":"83ec08d7c30843102113f6d86ff9f083","slug":"GO语言/基础/Interface","date":"2024-10-12T02:26:57.839Z","updated":"2024-10-19T08:23:26.866Z","comments":true,"path":"api/articles/GO语言/基础/Interface.json","keywords":null,"cover":"/images/cover/5.png","text":"Interface 如果一个结构体实现了接口的所有方法，那么该结构体变实现了该接口，满足里氏替换原则。 如果结构体 A 是结构体 B 中的字段，那么 A 类似是...","permalink":"/post/GO语言/基础/Interface","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}