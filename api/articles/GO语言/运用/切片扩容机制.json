{"title":"切片扩容机制","uid":"88143d9759619260f83f1d39234583ee","slug":"GO语言/运用/切片扩容机制","date":"2024-10-12T02:28:08.838Z","updated":"2024-10-19T08:25:21.629Z","comments":true,"path":"api/articles/GO语言/运用/切片扩容机制.json","keywords":null,"cover":"/images/cover/5.png","content":"<h1 id=\"切片扩容机制\"><a href=\"#切片扩容机制\" class=\"headerlink\" title=\"切片扩容机制\"></a>切片扩容机制</h1><ol>\n<li><p><a href=\"https://www.bilibili.com/video/BV1hv411x7we?p=2&vd_source=507d1879a78d5f28fa1ac6c38dbc28d0\">学习（扩容机制从视频 4min 开始）</a><br><a href=\"https://blog.csdn.net/qq_47831505/article/details/135540661\">学习 2</a></p>\n</li>\n<li><p>总结：：</p>\n<ol>\n<li>第一步：<strong>计算容量</strong></li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> needCap <span class=\"type\">int</span>     <span class=\"comment\">// 所需容量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> oldCap <span class=\"type\">int</span>      <span class=\"comment\">// 当前容量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newCap <span class=\"type\">int</span>      <span class=\"comment\">// 扩容后新容量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> threshold = <span class=\"number\">256</span>  <span class=\"comment\">// 默认阈值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> needCap &gt; oldCap*<span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\tnewCap = needCap</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> oldCap &lt; threshold &#123;</span><br><span class=\"line\">\tnewCap = oldCap * <span class=\"number\">2</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> oldCap &gt;= threshold &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> newCap &lt; needCap &#123;</span><br><span class=\"line\">\t\tnewCap += (newCap + <span class=\"number\">3</span>*threshold) / <span class=\"number\">4</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #292D3E\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">- 如果所需容量大于当前容量的两倍，则使用所需容量</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">- 如果当前容量小于阈值（默认 256），则将容量翻倍</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">- 如果当前容量大于等于阈值（默认 256），则进行公示运算，直到新容量大于所需容量</span></span></code></pre></div><ol start=\"2\">\n<li>第二步：<strong>内存对齐</strong></li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：这里计算得到的新容量不一定就是真正的容量，因为还需要进行“内存对齐”操作 ：</p>\n<blockquote>\n<p>内存管理模块在分配内存时都是 8 的偶数倍，如：8、16、32、48、64、80…<br>例如，当新容量&#x3D;5，5*8&#x3D;40，32&lt;40&lt;48，故，实际容量&#x3D;48（即 6 个字节，而不是 5 个字节）</p></blockquote>\n</blockquote>\n</li>\n<li><p>例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i1 := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">i1 = <span class=\"built_in\">append</span>(i1, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">fmt.Println(<span class=\"built_in\">cap</span>(i1))  <span class=\"comment\">// cap = 6</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>由切片扩容带来的陷阱：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Test01</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">a := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(a)</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;Test01(): a=%v cap(a)=%v &amp;a[0]=%p\\n&quot;</span>, a, <span class=\"built_in\">cap</span>(a), &amp;a[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">foo</span><span class=\"params\">(a []<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"built_in\">append</span>(a, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;foo(): a=%v cap(a)=%v &amp;a[0]=%p\\n&quot;</span>, a, <span class=\"built_in\">cap</span>(a), &amp;a[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：<br>foo(): a&#x3D;[200 2 1] cap(a)&#x3D;4 &amp;a[0]&#x3D;0xc000018240<br>Test01(): a&#x3D;[1 2] cap(a)&#x3D;2 &amp;a[0]&#x3D;0xc00000a330</p>\n<p>解析：<br>切片 a 是引用类型，传递的是指针，但是 foo()中修改 a 值并未对 Test01()的 a 产生影响，而且二者地址也不一样。<br>这是因为切片 a 容量只有 2，在 foo()中 append 后发生扩容，指向的底层数组改变了，所以修改 foo 的 a 对原切片无影响。</p>\n</li>\n</ol>\n","text":"切片扩容机制 学习（扩容机制从视频 4min 开始）学习 2 总结：： 第一步：计算容量 1234567891011121314var needCap int ...","permalink":"/post/GO语言/运用/切片扩容机制","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%87%E7%89%87%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">切片扩容机制</span></a></li></ol>","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"自定义类型可以有方法","uid":"4fd198b7eacb73f09ceb8fc86c69789a","slug":"GO语言/运用/自定义类型可以有方法","date":"2024-10-12T02:28:08.854Z","updated":"2024-10-19T08:25:22.845Z","comments":true,"path":"api/articles/GO语言/运用/自定义类型可以有方法.json","keywords":null,"cover":"/images/cover/5.png","text":"自定义类型可以有方法 自定义类型有两种： 结构体 别名 自定义类型可以有方法： ​go 中非引用类型的变量在声明后便已经分配内存了，可以直接使用 ​ 12345...","permalink":"/post/GO语言/运用/自定义类型可以有方法","photos":[],"count_time":{"symbolsCount":337,"symbolsTime":"1 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"oauth2","uid":"190cfd3d8a5d6fa37d4aa68b376ffe75","slug":"GO语言/运用/oauth2","date":"2024-10-12T02:28:08.811Z","updated":"2024-10-19T08:25:20.415Z","comments":true,"path":"api/articles/GO语言/运用/oauth2.json","keywords":null,"cover":"/images/cover/5.png","text":"oauth2参考教程参考代码 创建 Manager 实例：manage.NewDefaultManager() 配置 Manager 参数（该代码文件此处略过）...","permalink":"/post/GO语言/运用/oauth2","photos":[],"count_time":{"symbolsCount":560,"symbolsTime":"1 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}