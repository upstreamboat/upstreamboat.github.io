{"title":"make、type、range","uid":"c007e764a72957fafa5b15a6941bd0e2","slug":"GO语言/基础/make、type、range","date":"2024-10-12T02:26:58.406Z","updated":"2024-10-19T08:24:06.563Z","comments":true,"path":"api/articles/GO语言/基础/make、type、range.json","keywords":null,"cover":"/images/cover/5.png","content":"<h1 id=\"make、type、range\"><a href=\"#make、type、range\" class=\"headerlink\" title=\"make、type、range\"></a>make、type、range</h1><ol>\n<li><p><code>make</code> 仅用于这三种引用类型的初始化：切片 Slice、集合 Map、通道 channel</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>)  <span class=\"comment\">//分配一个长度为 10 的底层数组，返回一个长度为 0，容量为 10 的切片</span></span><br><span class=\"line\">s2 := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;  <span class=\"comment\">//不使用make()，直接初始化，和数组一样</span></span><br><span class=\"line\"></span><br><span class=\"line\">m := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)  <span class=\"comment\">//给 map 分配内存空间</span></span><br><span class=\"line\">m2 := <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>:<span class=\"number\">2</span>, <span class=\"number\">2</span>:<span class=\"number\">3</span>&#125;  <span class=\"comment\">//也可以不使用make()，直接初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>, <span class=\"number\">10</span>)  <span class=\"comment\">//给 channel 分配的内存空间大小（缓冲容量）为 10</span></span><br></pre></td></tr></table></figure>\n\n<p>make 与 new 的区别：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1）两者都是分配内存，make 只能分配上面三个类型，但是 new 还可以为其它类型分配内存<br>2）make 返回的类型本身，但是 new 返回的是类型的指针</p></blockquote>\n</li>\n<li><p><code>type</code> 关键字的用途<br>1）定义结构体：<br><code>type 结构体名 struct&#123;&#125;</code><br>2）定义接口：<br><code>type 接口名 interface&#123;&#125;</code><br>3）类型别名：<br><code>type str string</code><br><code>var str1 str = &quot;haha&quot;</code></p>\n</li>\n<li><p><code>range</code> 可以遍历字符串、数组、切片、集合、通道等</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字符串</span></span><br><span class=\"line\">str := <span class=\"string\">&quot;abA&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> str &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;string[%v] = [%v]\\n&quot;</span>, k, v)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr := [<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;array[%v] = [%v]\\n&quot;</span>, k, v)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//切片</span></span><br><span class=\"line\"></span><br><span class=\"line\">sli1 := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//var sli = make([]int,2,3)  //也可以使用make()进行声明</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> sli1 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;slice[%v] = [%v]\\n&quot;</span>, k, v)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//集合</span></span><br><span class=\"line\"></span><br><span class=\"line\">m := <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>&#123;<span class=\"string\">&quot;a&quot;</span>: <span class=\"number\">97</span>, <span class=\"string\">&quot;b&quot;</span>: <span class=\"number\">98</span>, <span class=\"string\">&quot;A&quot;</span>: <span class=\"number\">65</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> m &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;map[%v] = [%v]\\n&quot;</span>, k, v)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通道</span></span><br><span class=\"line\"></span><br><span class=\"line\">c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">c &lt;- <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">c &lt;- <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">c &lt;- <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">close</span>(c) <span class=\"comment\">//一定要关闭通道,否则在range中,即便通道中没了数据也会继续等待数据写入,从而造成阻塞</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> v := <span class=\"keyword\">range</span> c &#123;  <span class=\"comment\">//通道遍历不返回key，只返回value值</span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;channel = [%v]\\n&quot;</span>, v)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>range 和 for</code><br>range 对每个迭代值都创建了一个拷贝，而 for 没有<br>&#x2F;&#x2F; 如果每个迭代值内存占用很大，则 for 性能优于 range。<br>&#x2F;&#x2F; 如果每次迭代的值内存占用很小，则两者性能几乎无差异；<br>&#x2F;&#x2F; 如果 range 迭代时忽略值，只返回索引，则两者性能几乎无差异；<br>&#x2F;&#x2F; 如果 range 迭代时，每个迭代值是指针，则两者性能几乎无差异。</p>\n<p>&#x2F;&#x2F; map、chan 只能用 range 遍历</p>\n</li>\n</ol>\n","text":"make、type、range make 仅用于这三种引用类型的初始化：切片 Slice、集合 Map、通道 channel 1234567s := make(...","permalink":"/post/GO语言/基础/make、type、range","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#make%E3%80%81type%E3%80%81range\"><span class=\"toc-text\">make、type、range</span></a></li></ol>","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Gin","uid":"1844acb7289f08bbbe7bcf325b1cd691","slug":"GO语言/基础/Gin","date":"2024-10-12T02:26:58.459Z","updated":"2024-10-19T08:24:08.834Z","comments":true,"path":"api/articles/GO语言/基础/Gin.json","keywords":null,"cover":"/images/cover/5.png","text":"Gin 学习：https://www.liwenzhou.com/posts/Go/gin/#c-0-6-0 获取参数：context.Get()：从 Keys...","permalink":"/post/GO语言/基础/Gin","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"go module","uid":"0d4253f077b5777a177cf6299ae256a6","slug":"GO语言/基础/go module","date":"2024-10-12T02:26:58.374Z","updated":"2024-10-19T08:24:04.335Z","comments":true,"path":"api/articles/GO语言/基础/go module.json","keywords":null,"cover":"/images/cover/5.png","text":"go module go 包管理进化史： go path ->go vendor ->go module go module: 启用： 使用 go path 模...","permalink":"/post/GO语言/基础/go module","photos":[],"count_time":{"symbolsCount":422,"symbolsTime":"1 mins."},"categories":[{"name":"GO语言","slug":"GO语言","count":77,"path":"api/categories/GO语言.json"}],"tags":[{"name":"技术","slug":"技术","count":158,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon_2.jfif","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}