{"title":"vue总览","uid":"9701f09663d792796faf13208f2a6b15","slug":"杂学/前端/vue/vue总览","date":"2024-10-11T08:23:15.184Z","updated":"2024-10-19T08:17:55.912Z","comments":true,"path":"api/articles/杂学/前端/vue/vue总览.json","keywords":null,"cover":"/images/cover/8.png","content":"<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>v-bind</td>\n<td>用于将 Vue 实例的数据绑定到 HTML 元素的属性上。<br><br>总结：绑定 对象 到 元素属性 上，就是指数据流向页面。格式：v-bind:属性名。简写：:属性名<br><br>注意：没有属性名称的 v-bind 会将一个对象的所有属性都作为 attribute 应用到目标元素上。</td>\n</tr>\n<tr>\n<td>v-if</td>\n<td>用于根据表达式的值来条件性地渲染元素或组件。<br><br>总结：条件触发。格式：v-if&#x3D;”布尔值”</td>\n</tr>\n<tr>\n<td>v-show</td>\n<td>v-show 是 Vue.js 提供的一种指令，用于根据表达式的值来条件性地显示或隐藏元素。<br><br>总结：是否显示元素。格式：v-show&#x3D;”布尔值”</td>\n</tr>\n<tr>\n<td>v-for</td>\n<td>用于根据数组或对象的属性值来循环渲染元素或组件。<br><br>总结：循环。格式：v-for&#x3D;”value in 数组&#x2F;对象&#x2F;数值”，数值的话会是循环次数。</td>\n</tr>\n<tr>\n<td>v-on</td>\n<td>用于在 HTML 元素上绑定事件监听器，使其能够触发 Vue 实例中的方法或函数。<br><br>总结：监听 元素事件。格式：v-on:事件名。简写：@事件名</td>\n</tr>\n<tr>\n<td>v-model</td>\n<td>用于在表单控件和 Vue 实例的数据之间创建双向数据绑定。<br><br>总结：双向绑定，用于 input、select、checkbox 等元素，元素内容 改变 对象内容 也改变。</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://vue3js.cn/interview/vue/show_if.html#%E4%BA%8C%E3%80%81v-show%E4%B8%8Ev-if%E7%9A%84%E5%8C%BA%E5%88%AB\">v-if 和 v-show 的区别</a></p>\n<h2 id=\"directive\"><a href=\"#directive\" class=\"headerlink\" title=\"directive\"></a>directive</h2><p>自定义指令</p>\n<p>在 <code>&lt;script setup&gt;</code> 中，任何以 v 开头的驼峰式命名的变量都可以被用作一个自定义指令。比如 vFocus 即可以在模板中以 v-focus 的形式使用。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注册 (功能指令)： <code>app.directive(&#39;focus&#39;, () =&gt; &#123;&#125;)</code></p></blockquote>\n<p>不推荐在组件上使用自定义指令。</p>\n<h2 id=\"ref、reactive\"><a href=\"#ref、reactive\" class=\"headerlink\" title=\"ref、reactive\"></a>ref、reactive</h2><p>创建响应式数据</p>\n<p>ref：创建基本类型、对象类型（需要.value 取属性）<br>reactive：创建对象类型。注意：重新分配新对象会失去响应式（即无法对 reactive 对象重新整体赋值，可以用 Object.assin()解决）。<br>toRefs：从响应式对象解构属性会丢失响应式，需要使用 toRefs(对象)来保持响应式。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>使用 toRefs 后，解构出的变量值变化时，原对象的值也会跟着变化</p></blockquote>\n<h2 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h2><p>计算属性。和普通的方法相比，computer()具有缓存，只有在依赖的属性变化时才会重新计算，否则每次调用都是返回之前计算的值，不会重新计算。</p>\n<h2 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h2><p>监听目标变化时，触发动作。监听目标可以是 基本类型、对象类型、对象类型的属性（通过箭头函数实现）、相关数组。</p>\n<p>监听 ref 对象时，不会监听对象的属性，需要手动开启深度监听；但监听 reactive 对象时，自动隐式地开启了深度监听。</p>\n<p>_watchEffect_：自动识别监听目标。</p>\n<h2 id=\"标签-ref\"><a href=\"#标签-ref\" class=\"headerlink\" title=\"标签 ref\"></a>标签 ref</h2><p>放在 HTML 标签上，取到的就是 DOM 元素。</p>\n<p>放在某个组件标签上，取到的就是该组件的实例对象。但是想要读取该实例对象的属性，需要该组件用 defineExpose 交出相关属性。</p>\n<h2 id=\"route\"><a href=\"#route\" class=\"headerlink\" title=\"route\"></a>route</h2><ul>\n<li><p>路由占位，路由组件将被展示在这里：<router-view/></p>\n</li>\n<li><p>路由实例：</p>\n  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Home&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">redirect</span>: /home,</span><br><span class=\"line\">    <span class=\"comment\">// component：</span></span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">Home</span> <span class=\"comment\">// 组件写法1：Home是一个组件</span></span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;@/view/Home.vue&#x27;</span>) <span class=\"comment\">// 组件写法2</span></span><br><span class=\"line\">    <span class=\"comment\">// 设置参数：</span></span><br><span class=\"line\">    <span class=\"attr\">params</span>: &#123;&#125; <span class=\"comment\">// 路径参数。注意：无法通过path跳转，需要通过name跳转</span></span><br><span class=\"line\">    <span class=\"attr\">query</span>: &#123;&#125; <span class=\"comment\">// 查询参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 传递参数：注意：使用了props后，需要在接收处使用defineProps()接收。如：Home.vue中代码：defineProps([参数1，参数2])</span></span><br><span class=\"line\">    <span class=\"attr\">props</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 只能用于传params的参数</span></span><br><span class=\"line\">    <span class=\"title function_\">props</span>(<span class=\"params\">route</span>)&#123;<span class=\"keyword\">return</span> route.<span class=\"property\">query</span>&#125; <span class=\"comment\">// 可以传query或者param（需要route.params）的参数</span></span><br><span class=\"line\">&#125;,&#123;&#125;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>路由导航：</p>\n<ol>\n<li>方式一：标签 route-link：</li>\n</ol>\n  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;route-link to=<span class=\"string\">&quot;路径&quot;</span>&gt;</span><br><span class=\"line\">&lt;route-link :to=&quot;&#123;path:&#x27;路径&#x27;,name:&#x27;名字&#x27;,params:&#123;&#125;&#125;&quot;&gt;</span><br><span class=\"line\">&lt;route-link :to=&quot;&#123;path:&#x27;路径&#x27;,name:&#x27;名字&#x27;,query:&#123;&#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>方式二：编程式路由导航：router.push(“路由内容”) &#x2F;&#x2F; 这个路由内容和 to 的内容写法相同<br>replace 无历史记录，push 有历史记录</li>\n</ol>\n</li>\n<li><p>useRoute、useRouter、createRouter<br>  useRoute：在组件中获取当前路由信息，如获取路径、名称等。<br>  useRouter：获取路由实例，包含路由信息和动态操作，如 router.push(“&#x2F;“)：跳转到根路径<br>  createRouter：创建路由器，存放路由</p>\n  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js 代码</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> router = <span class=\"title function_\">createRouter</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">history</span>: <span class=\"title function_\">createWebHashHistory</span>(),</span><br><span class=\"line\">\troutes,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// APP.vue 代码</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/router/index&#x27;</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(router)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>导航守卫<br>  <a href=\"https://blog.csdn.net/weixin_60408555/article/details/124454502\">参见</a></p>\n  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.<span class=\"title function_\">beforeEach</span>(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span></span>) =&gt;</span> &#123; <span class=\"comment\">// to: 即将要进入的目标，from: 当前导航正要离开的路由</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回 false 以取消导航</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"hooks\"><a href=\"#hooks\" class=\"headerlink\" title=\"hooks\"></a>hooks</h2><p>也叫组合式函数，类似于 java 中的封装类，将同类事物封装在一个类中，命名规则：useXxx</p>\n<p>hooks 中的 mouse.js 代码：<code>export function useMouse() &#123; return &#123; 变量 &#125; &#125;</code></p>\n<p>调用处的代码：<code>const &#123;变量&#125; = useMouse()</code></p>\n<h2 id=\"pinia\"><a href=\"#pinia\" class=\"headerlink\" title=\"pinia\"></a>pinia</h2><p>集中式状态管理，管理组件间共享数据。其实也是封装，<strong>封装全局变量</strong>。</p>\n<ol>\n<li><p>pinia 仓库 store.ts 中的代码：</p>\n <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> usestoreName = <span class=\"title function_\">defineStore</span>(<span class=\"string\">&quot;storeName&quot;</span>,&#123; <span class=\"comment\">//storeName其实用不到</span></span><br><span class=\"line\">\t<span class=\"title function_\">state</span>(<span class=\"params\"></span>)&#123;<span class=\"keyword\">return</span> &#123;<span class=\"attr\">sum</span>:<span class=\"number\">2</span>&#125;&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">actions</span>:&#123;<span class=\"title function_\">updateSum</span>(<span class=\"params\">value</span>)&#123;<span class=\"variable language_\">this</span>.<span class=\"property\">sum</span>+=<span class=\"number\">1</span>&#125;&#125;, <span class=\"comment\">// 第三种修改方式，需要在使用处调用updateSum</span></span><br><span class=\"line\">\t<span class=\"attr\">getters</span>:&#123;<span class=\"title function_\">fun1</span>(<span class=\"params\">state</span>)&#123;<span class=\"keyword\">return</span> state.<span class=\"property\">sum</span>+<span class=\"number\">1</span>&#125;&#125; <span class=\"comment\">// getters与actions相比，是用来获取一些计算后的值</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> usestoreName = <span class=\"title function_\">defineStore</span>(<span class=\"string\">&quot;storeName&quot;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sum = <span class=\"title function_\">ref</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"title function_\">updateSum</span>(<span class=\"params\">value</span>)&#123;<span class=\"variable language_\">this</span>.<span class=\"property\">sum</span>+=<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">fun1</span>(<span class=\"params\">state</span>)&#123;<span class=\"keyword\">return</span> state.<span class=\"property\">sum</span>+<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用处的代码：</p>\n <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myStore = <span class=\"title function_\">usestoreName</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;mySum&#125; = <span class=\"title function_\">storeToRefs</span>(myStore)  <span class=\"comment\">//如果不用storeToRefs，取出的mySum会丢失响应式。或者干脆直接通过myStore.sum使用</span></span><br><span class=\"line\">myStore.<span class=\"property\">sum</span> = <span class=\"number\">9</span>  <span class=\"comment\">// 第一种修改方式，直接修改</span></span><br><span class=\"line\">myStore.$patch(&#123;<span class=\"attr\">sum</span>:<span class=\"number\">9</span>&#125;)  <span class=\"comment\">// 第二种修改方式，借助$patch批量修改</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// $subsrcibe：类似watch</span></span><br><span class=\"line\">myStore.$subsrcibe(<span class=\"function\">(<span class=\"params\">mutate,state</span>)=&gt;</span>&#123;  <span class=\"comment\">//mutate是本次修改的信息，state是修改后的state</span></span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(mutate,state)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"组件通信\"><a href=\"#组件通信\" class=\"headerlink\" title=\"组件通信\"></a>组件通信</h2><ol>\n<li><p>defineProps：接收父组件传来的属性。父传子模式。</p>\n<p>父组件传输属性：（属性值可以是任意类型）</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">SonComponent</span> :some-attr=<span class=\"string\">&quot;var1&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件接收属性：（参数可以是数组或对象）</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myProps = <span class=\"title function_\">defineProps</span>([<span class=\"string\">&quot;some-attr&quot;</span>])</span><br><span class=\"line\">&lt;p&gt;&#123;&#123; myProps.<span class=\"property\">someAttr</span> &#125;&#125;&lt;<span class=\"regexp\">/p&gt; /</span>/ some-attr被自动转换成了someAttr，可以打印myProp对象看出来。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>defineEmits 和$emit：自定义事件，可用于父子组件通信。</p>\n<p>父组件监听事件：（事件名是 some-event，该事件要做的是调用 callback 函数）</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">SonComponent</span> <span class=\"meta\">@some</span>-event=<span class=\"string\">&quot;callback&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件触发事件：</p>\n<ol>\n<li>defineEmits 方式：（与 defineProps 类似）</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup&gt;<span class=\"keyword\">const</span> myEmits = <span class=\"title function_\">defineEmits</span>([<span class=\"string\">&#x27;some-event&#x27;</span>])&lt;/script&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;myEmits(&#x27;someEvent&#x27;)&quot;</span>&gt;</span>click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>$emit 方式：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button <span class=\"meta\">@click</span>=<span class=\"string\">&quot;$emit(&#x27;someEvent&#x27;)&quot;</span>&gt;click me&lt;<span class=\"regexp\">/button&gt; /</span><span class=\"regexp\">/ $emit 只能在 DOM 中使用，无法在 script 中使用``&lt;button @click=&quot;$emit(&#x27;someEvent&#x27;)&quot;&gt;click me&lt;/</span>button&gt; <span class=\"comment\">// $emit 只能在 DOM 中使用，无法在 script 中使用</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>defineModel：（组件标签上使用 v-model）</p>\n<p>​ 父组件代码：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> msg = <span class=\"title function_\">ref</span>(<span class=\"string\">&#x27;Hello World!&#x27;</span>)</span><br><span class=\"line\">&lt;<span class=\"title class_\">SonComponent</span> v-model=<span class=\"string\">&quot;msg&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件代码：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myModel = <span class=\"title function_\">defineModel</span>()</span><br><span class=\"line\">&lt;input v-model=<span class=\"string\">&quot;myModel&quot;</span>&gt; <span class=\"comment\">// 效果：子组件输入框中内容与父组件中的msg变量双向绑定，一改具改</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>mitt：第三方自定义事件库</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建mitt：</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> emitter = <span class=\"title function_\">mitt</span>() <span class=\"comment\">// 比如：在A.js中创建mitt实例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听mitt：</span></span><br><span class=\"line\">emitter.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;事件名&quot;</span>,<span class=\"function\">(<span class=\"params\">参数</span>)=&gt;</span>&#123; <span class=\"comment\">// 要做的事 &#125;) // 比如：然后在B.vue中监听事件，需要先导入mitt实例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发mitt：</span></span><br><span class=\"line\">emitter.<span class=\"title function_\">emit</span>(<span class=\"string\">&quot;事件名&quot;</span>,参数) <span class=\"comment\">// 比如：最后在C.vue中触发事件（可以通过@click），需要先导入mitt实例</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>$attrs：透传，未被接收的属性和事件会被渗透下传，获取方式：<code>$attrs[&quot;属性名&quot;]</code>、<code>$attrs.事件名</code><br>可以实现祖传孙模式：父传子，子不使用，继续传给孙，孙获取。</p>\n</li>\n<li><p><code>$refs（子传父）</code>、<code>$parent（父传子）</code></p>\n</li>\n<li><p>依赖注入：祖先和后代（包括子、孙、重孙等）进行通信；非后代无法通信。</p>\n<p>祖组件代码：provide（祖先传数据和方法）</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"title function_\">provide</span>(<span class=\"string\">&#x27;key&#x27;</span>, count)</span><br></pre></td></tr></table></figure>\n\n<p>孙组件代码：inject（后代接收数据和方法）</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> value = <span class=\"title function_\">inject</span>(<span class=\"string\">&#x27;key&#x27;</span>, <span class=\"string\">&#x27;这是默认值&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>slot 插槽：组件内部块，可以实现同一块中根据父组件的传入，从而展示不同内容</p>\n<ul>\n<li>普通插槽：</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>父组件代码：</p></blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">SonComponent</span>&gt; <span class=\"title class_\">Click</span> me! &lt;!-- 插槽内容 --&gt;&lt;/<span class=\"title class_\">SonComponent</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>子组件代码：</p></blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button <span class=\"keyword\">class</span>=<span class=\"string\">&quot;fancy-btn&quot;</span>&gt; <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"comment\">&lt;!-- 插槽出口 --&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span> &lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>具名插槽：</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>父组件代码：</p></blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">SonComponent</span>&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-slot:slot1</span>&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span> <span class=\"comment\">// 这里的v-slot:slot1可以简写成#slot1</span></span><br><span class=\"line\">&lt;/<span class=\"title class_\">SonComponent</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>子组件代码：</p></blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;slot name=<span class=\"string\">&quot;slot1&quot;</span>&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>作用域插槽：（可以实现子传父模式）数据在子组件里，但如何呈现由父组件决定</p>\n<p>父组件代码：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">SonComponent</span>&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:slot1</span>=<span class=\"string\">&quot;sonProps&quot;</span>&gt;</span>&#123;&#123;sonProps.aa&#125;&#125; &#123;&#123;sonProps.bb&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\">&lt;/<span class=\"title class_\">SonComponent</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件代码：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;slot name=<span class=\"string\">&quot;slot1&quot;</span> :aa=<span class=\"string\">&quot;AA&quot;</span> :bb=<span class=\"string\">&quot;2&quot;</span>&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"组件配置：defineOptions\"><a href=\"#组件配置：defineOptions\" class=\"headerlink\" title=\"组件配置：defineOptions\"></a>组件配置：defineOptions</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">defineOptions</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">inheritAttrs</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 禁止透传</span></span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;SonComponent&quot;</span> <span class=\"comment\">// 自定义组件名</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h2><ol>\n<li><p>组件名：MyName</p>\n</li>\n<li><p>HTML 标签和属性名：my-name（这里默认是不分大小写的，所以不能使用驼峰模式）</p>\n</li>\n<li><p>hooks 名：useXxx</p>\n</li>\n<li><p>事件名：xx-xx</p>\n</li>\n</ol>\n","text":" 指令 描述 v-bind 用于将 Vue 实例的数据绑定到 HTML 元素的属性上。总结：绑定 对象 到 元素属性 上，就是指数据流向页面。格式：v-bind...","permalink":"/post/杂学/前端/vue/vue总览","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"vue","slug":"vue","count":15,"path":"api/categories/vue.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#directive\"><span class=\"toc-text\">directive</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ref%E3%80%81reactive\"><span class=\"toc-text\">ref、reactive</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#computed\"><span class=\"toc-text\">computed</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#watch\"><span class=\"toc-text\">watch</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%87%E7%AD%BE-ref\"><span class=\"toc-text\">标签 ref</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#route\"><span class=\"toc-text\">route</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#hooks\"><span class=\"toc-text\">hooks</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#pinia\"><span class=\"toc-text\">pinia</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">组件通信</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E9%85%8D%E7%BD%AE%EF%BC%9AdefineOptions\"><span class=\"toc-text\">组件配置：defineOptions</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">命名规则</span></a></li></ol>","author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"ref、reactive","uid":"e094460162e9e8b73de67cb4bbb648b6","slug":"杂学/前端/vue/ref、reactive","date":"2024-10-12T01:18:17.533Z","updated":"2024-10-19T08:18:00.861Z","comments":true,"path":"api/articles/杂学/前端/vue/ref、reactive.json","keywords":null,"cover":"/images/cover/8.png","text":" ref、reactive：创建响应式数据ref：创建基本类型、对象类型（需要.value 取属性）reactive：创建对象类型。注意：重新分配新对象会失去响...","permalink":"/post/杂学/前端/vue/ref、reactive","photos":[],"count_time":{"symbolsCount":397,"symbolsTime":"1 mins."},"categories":[{"name":"vue","slug":"vue","count":15,"path":"api/categories/vue.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}},"next_post":{"title":"网络协议","uid":"950d57d7686fa56a02652649dfc2569e","slug":"杂学/前端/网络协议","date":"2024-10-11T07:57:38.697Z","updated":"2024-10-19T08:19:52.762Z","comments":true,"path":"api/articles/杂学/前端/网络协议.json","keywords":null,"cover":"/images/cover/4.png","text":"分层应用层：HTTP：规定数据的格式 传输层：TCP/UDP：添加端口，通过端口找到对方电脑上的程序，一个程序对应一个端口 网络层：IP：添加 IP 地址，用于...","permalink":"/post/杂学/前端/网络协议","photos":[],"count_time":{"symbolsCount":514,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":14,"path":"api/categories/前端.json"}],"tags":[{"name":"技术","slug":"技术","count":168,"path":"api/tags/技术.json"}],"author":{"name":"upstreamboat","slug":"blog-author","avatar":"images/favicon/favicon.ico","link":"/","description":"nothing to say","socials":{"github":"https://github.com/upstreamboat","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/images/favicon/bilibili.svg","link":"https://www.bilibili.com/"},"chatgpt":{"icon":"/images/favicon/chatgpt.svg","link":"https://chatgpt.com/"}}}}}}